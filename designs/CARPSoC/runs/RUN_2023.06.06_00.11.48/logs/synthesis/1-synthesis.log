
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.27+30 (git sha1 101075611fc, gcc 8.3.1 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Liberty frontend: ./designs/CARPSoC/macros/sky130_sram_2kbyte_1rw1r_32x512_8_TT_1p8V_25C.lib
Imported 1 cell types from liberty file.

2. Executing Verilog-2005 frontend: ./designs/CARPSoC/macros/sky130_sram_2kbyte_1rw1r_32x512_8.v
Parsing SystemVerilog input from `./designs/CARPSoC/macros/sky130_sram_2kbyte_1rw1r_32x512_8.v' to AST representation.
Replacing existing blackbox module `\sky130_sram_2kbyte_1rw1r_32x512_8' at ./designs/CARPSoC/macros/sky130_sram_2kbyte_1rw1r_32x512_8.v:6.1-114.10.
Generating RTLIL representation for module `\sky130_sram_2kbyte_1rw1r_32x512_8'.
./designs/CARPSoC/macros/sky130_sram_2kbyte_1rw1r_32x512_8.v:0: Warning: System task `$display' outside initial block is unsupported.
./designs/CARPSoC/macros/sky130_sram_2kbyte_1rw1r_32x512_8.v:0: Warning: System task `$display' outside initial block is unsupported.
./designs/CARPSoC/macros/sky130_sram_2kbyte_1rw1r_32x512_8.v:0: Warning: System task `$display' outside initial block is unsupported.
./designs/CARPSoC/macros/sky130_sram_2kbyte_1rw1r_32x512_8.v:0: Warning: System task `$display' outside initial block is unsupported.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: ./designs/CARPSoC/src/user_project_wrapper.v
Parsing SystemVerilog input from `./designs/CARPSoC/src/user_project_wrapper.v' to AST representation.
Generating RTLIL representation for module `\user_project_wrapper'.
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: ./designs/CARPSoC/clam-soc/carp-lib/obi/obi_demux_1_to_4.sv
Parsing SystemVerilog input from `./designs/CARPSoC/clam-soc/carp-lib/obi/obi_demux_1_to_4.sv' to AST representation.
Generating RTLIL representation for module `\obi_demux_1_to_4'.
Successfully finished Verilog frontend.

5. Executing Verilog-2005 frontend: ./designs/CARPSoC/clam-soc/carp-lib/obi/obi_mux_2_to_1.sv
Parsing SystemVerilog input from `./designs/CARPSoC/clam-soc/carp-lib/obi/obi_mux_2_to_1.sv' to AST representation.
Generating RTLIL representation for module `\obi_mux_2_to_1'.
Successfully finished Verilog frontend.

6. Executing Verilog-2005 frontend: ./designs/CARPSoC/clam-soc/carp-lib/obi/wb_to_obi.sv
Parsing SystemVerilog input from `./designs/CARPSoC/clam-soc/carp-lib/obi/wb_to_obi.sv' to AST representation.
Generating RTLIL representation for module `\wb_to_obi'.
Successfully finished Verilog frontend.

7. Executing Verilog-2005 frontend: ./designs/CARPSoC/clam-soc/carp-lib/obi_gpio/obi_gpio.sv
Parsing SystemVerilog input from `./designs/CARPSoC/clam-soc/carp-lib/obi_gpio/obi_gpio.sv' to AST representation.
Generating RTLIL representation for module `\obi_gpio'.
Successfully finished Verilog frontend.

8. Executing Verilog-2005 frontend: ./designs/CARPSoC/clam-soc/carp-lib/obi_qspi_controller/obi_qspi_controller.sv
Parsing SystemVerilog input from `./designs/CARPSoC/clam-soc/carp-lib/obi_qspi_controller/obi_qspi_controller.sv' to AST representation.
Generating RTLIL representation for module `\obi_qspi_controller'.
Successfully finished Verilog frontend.

9. Executing Verilog-2005 frontend: ./designs/CARPSoC/clam-soc/carp-lib/obi_qspi_controller/spimemio.v
Parsing SystemVerilog input from `./designs/CARPSoC/clam-soc/carp-lib/obi_qspi_controller/spimemio.v' to AST representation.
Generating RTLIL representation for module `\spimemio'.
Generating RTLIL representation for module `\spimemio_xfer'.
Successfully finished Verilog frontend.

10. Executing Verilog-2005 frontend: ./designs/CARPSoC/clam-soc/core/include/defs.svh
Parsing SystemVerilog input from `./designs/CARPSoC/clam-soc/core/include/defs.svh' to AST representation.
Successfully finished Verilog frontend.

11. Executing Verilog-2005 frontend: ./designs/CARPSoC/clam-soc/core/include/pipe_regs.svh
Parsing SystemVerilog input from `./designs/CARPSoC/clam-soc/core/include/pipe_regs.svh' to AST representation.
Successfully finished Verilog frontend.

12. Executing Verilog-2005 frontend: ./designs/CARPSoC/clam-soc/core/include/rvfi.svh
Parsing SystemVerilog input from `./designs/CARPSoC/clam-soc/core/include/rvfi.svh' to AST representation.
Successfully finished Verilog frontend.

13. Executing Verilog-2005 frontend: ./designs/CARPSoC/clam-soc/core/rtl/core/modules/alu.sv
Parsing SystemVerilog input from `./designs/CARPSoC/clam-soc/core/rtl/core/modules/alu.sv' to AST representation.
Generating RTLIL representation for module `\alu'.
Successfully finished Verilog frontend.

14. Executing Verilog-2005 frontend: ./designs/CARPSoC/clam-soc/core/rtl/core/modules/branch_gen.sv
Parsing SystemVerilog input from `./designs/CARPSoC/clam-soc/core/rtl/core/modules/branch_gen.sv' to AST representation.
Generating RTLIL representation for module `\branch_gen'.
Successfully finished Verilog frontend.

15. Executing Verilog-2005 frontend: ./designs/CARPSoC/clam-soc/core/rtl/core/modules/csr.sv
Parsing SystemVerilog input from `./designs/CARPSoC/clam-soc/core/rtl/core/modules/csr.sv' to AST representation.
Generating RTLIL representation for module `\csr'.
Successfully finished Verilog frontend.

16. Executing Verilog-2005 frontend: ./designs/CARPSoC/clam-soc/core/rtl/core/modules/decoder.sv
Parsing SystemVerilog input from `./designs/CARPSoC/clam-soc/core/rtl/core/modules/decoder.sv' to AST representation.
Generating RTLIL representation for module `\decoder'.
Successfully finished Verilog frontend.

17. Executing Verilog-2005 frontend: ./designs/CARPSoC/clam-soc/core/rtl/core/modules/fwd_unit.sv
Parsing SystemVerilog input from `./designs/CARPSoC/clam-soc/core/rtl/core/modules/fwd_unit.sv' to AST representation.
Generating RTLIL representation for module `\fwd_unit'.
Successfully finished Verilog frontend.

18. Executing Verilog-2005 frontend: ./designs/CARPSoC/clam-soc/core/rtl/core/modules/hazard_unit.sv
Parsing SystemVerilog input from `./designs/CARPSoC/clam-soc/core/rtl/core/modules/hazard_unit.sv' to AST representation.
Generating RTLIL representation for module `\hazard_unit'.
Successfully finished Verilog frontend.

19. Executing Verilog-2005 frontend: ./designs/CARPSoC/clam-soc/core/rtl/core/modules/immed_gen.sv
Parsing SystemVerilog input from `./designs/CARPSoC/clam-soc/core/rtl/core/modules/immed_gen.sv' to AST representation.
Generating RTLIL representation for module `\immed_gen'.
Successfully finished Verilog frontend.

20. Executing Verilog-2005 frontend: ./designs/CARPSoC/clam-soc/core/rtl/core/modules/mem_prep.sv
Parsing SystemVerilog input from `./designs/CARPSoC/clam-soc/core/rtl/core/modules/mem_prep.sv' to AST representation.
Generating RTLIL representation for module `\mem_prep'.
Successfully finished Verilog frontend.

21. Executing Verilog-2005 frontend: ./designs/CARPSoC/clam-soc/core/rtl/core/modules/obi_req_driver.sv
Parsing SystemVerilog input from `./designs/CARPSoC/clam-soc/core/rtl/core/modules/obi_req_driver.sv' to AST representation.
Generating RTLIL representation for module `\obi_req_driver'.
Successfully finished Verilog frontend.

22. Executing Verilog-2005 frontend: ./designs/CARPSoC/clam-soc/core/rtl/core/modules/prog_cntr.sv
Parsing SystemVerilog input from `./designs/CARPSoC/clam-soc/core/rtl/core/modules/prog_cntr.sv' to AST representation.
Generating RTLIL representation for module `\prog_cntr'.
Successfully finished Verilog frontend.

23. Executing Verilog-2005 frontend: ./designs/CARPSoC/clam-soc/core/rtl/core/modules/reg_file.sv
Parsing SystemVerilog input from `./designs/CARPSoC/clam-soc/core/rtl/core/modules/reg_file.sv' to AST representation.
Generating RTLIL representation for module `\reg_file'.
Successfully finished Verilog frontend.

24. Executing Verilog-2005 frontend: ./designs/CARPSoC/clam-soc/core/rtl/core/modules/reg_forwarder.sv
Parsing SystemVerilog input from `./designs/CARPSoC/clam-soc/core/rtl/core/modules/reg_forwarder.sv' to AST representation.
Generating RTLIL representation for module `\reg_forwarder'.
Successfully finished Verilog frontend.

25. Executing Verilog-2005 frontend: ./designs/CARPSoC/clam-soc/core/rtl/core/stages/decode_stage.sv
Parsing SystemVerilog input from `./designs/CARPSoC/clam-soc/core/rtl/core/stages/decode_stage.sv' to AST representation.
Generating RTLIL representation for module `\decode_stage'.
Successfully finished Verilog frontend.

26. Executing Verilog-2005 frontend: ./designs/CARPSoC/clam-soc/core/rtl/core/stages/exec_stage.sv
Parsing SystemVerilog input from `./designs/CARPSoC/clam-soc/core/rtl/core/stages/exec_stage.sv' to AST representation.
Generating RTLIL representation for module `\exec_stage'.
Successfully finished Verilog frontend.

27. Executing Verilog-2005 frontend: ./designs/CARPSoC/clam-soc/core/rtl/core/stages/fetch_stage.sv
Parsing SystemVerilog input from `./designs/CARPSoC/clam-soc/core/rtl/core/stages/fetch_stage.sv' to AST representation.
Generating RTLIL representation for module `\fetch_stage'.
Successfully finished Verilog frontend.

28. Executing Verilog-2005 frontend: ./designs/CARPSoC/clam-soc/core/rtl/core/stages/mem_slice_stage.sv
Parsing SystemVerilog input from `./designs/CARPSoC/clam-soc/core/rtl/core/stages/mem_slice_stage.sv' to AST representation.
Generating RTLIL representation for module `\mem_slice_stage'.
Successfully finished Verilog frontend.

29. Executing Verilog-2005 frontend: ./designs/CARPSoC/clam-soc/core/rtl/core/stages/wb_stage.sv
Parsing SystemVerilog input from `./designs/CARPSoC/clam-soc/core/rtl/core/stages/wb_stage.sv' to AST representation.
Generating RTLIL representation for module `\wb_stage'.
Successfully finished Verilog frontend.

30. Executing Verilog-2005 frontend: ./designs/CARPSoC/clam-soc/core/rtl/core/core.sv
Parsing SystemVerilog input from `./designs/CARPSoC/clam-soc/core/rtl/core/core.sv' to AST representation.
Generating RTLIL representation for module `\core'.
Successfully finished Verilog frontend.

31. Executing Verilog-2005 frontend: ./designs/CARPSoC/clam-soc/core/rtl/wrapper_modules/wrapper.sv
Parsing SystemVerilog input from `./designs/CARPSoC/clam-soc/core/rtl/wrapper_modules/wrapper.sv' to AST representation.
Generating RTLIL representation for module `\wrapper'.
Successfully finished Verilog frontend.

32. Executing Verilog-2005 frontend: ./designs/CARPSoC/clam-soc/peripherals/include/Peripheral_Unit_Defs.svh
Parsing SystemVerilog input from `./designs/CARPSoC/clam-soc/peripherals/include/Peripheral_Unit_Defs.svh' to AST representation.
Successfully finished Verilog frontend.

33. Executing Verilog-2005 frontend: ./designs/CARPSoC/clam-soc/peripherals/peripheral_interrupt_queue.sv
Parsing SystemVerilog input from `./designs/CARPSoC/clam-soc/peripherals/peripheral_interrupt_queue.sv' to AST representation.
Generating RTLIL representation for module `\peripheral_interrupt_queue'.
Warning: Replacing memory \inter_queue with list of registers. See ./designs/CARPSoC/clam-soc/peripherals/peripheral_interrupt_queue.sv:107, ./designs/CARPSoC/clam-soc/peripherals/peripheral_interrupt_queue.sv:67, ./designs/CARPSoC/clam-soc/peripherals/peripheral_interrupt_queue.sv:54
