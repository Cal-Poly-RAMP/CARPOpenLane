
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.27+30 (git sha1 101075611fc, gcc 8.3.1 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Verilog-2005 frontend: /openlane/designs/sv_core/src/exec_stage.sv
Parsing SystemVerilog input from `/openlane/designs/sv_core/src/exec_stage.sv' to AST representation.
Generating RTLIL representation for module `\exec_stage'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: /openlane/designs/sv_core/src/prog_cntr.sv
Parsing SystemVerilog input from `/openlane/designs/sv_core/src/prog_cntr.sv' to AST representation.
Generating RTLIL representation for module `\prog_cntr'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: /openlane/designs/sv_core/src/decode_stage.sv
Parsing SystemVerilog input from `/openlane/designs/sv_core/src/decode_stage.sv' to AST representation.
Generating RTLIL representation for module `\decode_stage'.
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: /openlane/designs/sv_core/src/mem_slice_stage.sv
Parsing SystemVerilog input from `/openlane/designs/sv_core/src/mem_slice_stage.sv' to AST representation.
Generating RTLIL representation for module `\mem_slice_stage'.
Warning: Replacing memory \halfs with list of registers. See /openlane/designs/sv_core/src/mem_slice_stage.sv:64
Warning: Replacing memory \bytes with list of registers. See /openlane/designs/sv_core/src/mem_slice_stage.sv:59
Successfully finished Verilog frontend.

5. Executing Verilog-2005 frontend: /openlane/designs/sv_core/src/fetch_stage.sv
Parsing SystemVerilog input from `/openlane/designs/sv_core/src/fetch_stage.sv' to AST representation.
Generating RTLIL representation for module `\fetch_stage'.
Successfully finished Verilog frontend.

6. Executing Verilog-2005 frontend: /openlane/designs/sv_core/src/alu.sv
Parsing SystemVerilog input from `/openlane/designs/sv_core/src/alu.sv' to AST representation.
Generating RTLIL representation for module `\alu'.
Successfully finished Verilog frontend.

7. Executing Verilog-2005 frontend: /openlane/designs/sv_core/src/immed_gen.sv
Parsing SystemVerilog input from `/openlane/designs/sv_core/src/immed_gen.sv' to AST representation.
Generating RTLIL representation for module `\immed_gen'.
Successfully finished Verilog frontend.

8. Executing Verilog-2005 frontend: /openlane/designs/sv_core/src/branch_gen.sv
Parsing SystemVerilog input from `/openlane/designs/sv_core/src/branch_gen.sv' to AST representation.
Generating RTLIL representation for module `\branch_gen'.
Successfully finished Verilog frontend.

9. Executing Verilog-2005 frontend: /openlane/designs/sv_core/src/wb_stage.sv
Parsing SystemVerilog input from `/openlane/designs/sv_core/src/wb_stage.sv' to AST representation.
Generating RTLIL representation for module `\wb_stage'.
Successfully finished Verilog frontend.

10. Executing Verilog-2005 frontend: /openlane/designs/sv_core/src/core.sv
Parsing SystemVerilog input from `/openlane/designs/sv_core/src/core.sv' to AST representation.
Generating RTLIL representation for module `\core'.
Successfully finished Verilog frontend.

11. Executing Verilog-2005 frontend: /openlane/designs/sv_core/src/mem_prep.sv
Parsing SystemVerilog input from `/openlane/designs/sv_core/src/mem_prep.sv' to AST representation.
Generating RTLIL representation for module `\mem_prep'.
Successfully finished Verilog frontend.

12. Executing Verilog-2005 frontend: /openlane/designs/sv_core/src/reg_forwarder.sv
Parsing SystemVerilog input from `/openlane/designs/sv_core/src/reg_forwarder.sv' to AST representation.
Generating RTLIL representation for module `\reg_forwarder'.
Successfully finished Verilog frontend.

13. Executing Verilog-2005 frontend: /openlane/designs/sv_core/src/fwd_unit.sv
Parsing SystemVerilog input from `/openlane/designs/sv_core/src/fwd_unit.sv' to AST representation.
Generating RTLIL representation for module `\fwd_unit'.
Successfully finished Verilog frontend.

14. Executing Verilog-2005 frontend: /openlane/designs/sv_core/src/hazard_unit.sv
Parsing SystemVerilog input from `/openlane/designs/sv_core/src/hazard_unit.sv' to AST representation.
Generating RTLIL representation for module `\hazard_unit'.
Successfully finished Verilog frontend.

15. Executing Verilog-2005 frontend: /openlane/designs/sv_core/src/reg_file.sv
Parsing SystemVerilog input from `/openlane/designs/sv_core/src/reg_file.sv' to AST representation.
Generating RTLIL representation for module `\reg_file'.
Successfully finished Verilog frontend.

16. Executing Verilog-2005 frontend: /openlane/designs/sv_core/src/decoder.sv
Parsing SystemVerilog input from `/openlane/designs/sv_core/src/decoder.sv' to AST representation.
Generating RTLIL representation for module `\decoder'.
Successfully finished Verilog frontend.

17. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/sv_core/runs/RUN_2023.05.11_22.16.27/tmp/synthesis/hierarchy.dot'.
Dumping module core to page 1.

18. Executing HIERARCHY pass (managing design hierarchy).

18.1. Analyzing design hierarchy..
Top module:  \core
Used module:     \hazard_unit
Used module:     \fwd_unit
Used module:         \reg_forwarder
Used module:     \wb_stage
Used module:     \mem_slice_stage
Used module:     \exec_stage
Used module:         \mem_prep
Used module:         \branch_gen
Used module:         \alu
Used module:     \decode_stage
Used module:         \immed_gen
Used module:         \decoder
Used module:     \fetch_stage
Used module:         \prog_cntr
Reprocessing module core because instantiated module hazard_unit has become available.
Generating RTLIL representation for module `\core'.

18.2. Analyzing design hierarchy..
Top module:  \core
Used module:     \hazard_unit
Used module:     \fwd_unit
Used module:         \reg_forwarder
Used module:     \wb_stage
Used module:     \mem_slice_stage
Used module:     \exec_stage
Used module:         \mem_prep
Used module:         \branch_gen
Used module:         \alu
Used module:     \decode_stage
Used module:         \immed_gen
Used module:         \decoder
Used module:     \fetch_stage
Used module:         \prog_cntr

18.3. Analyzing design hierarchy..
Top module:  \core
Used module:     \hazard_unit
Used module:     \fwd_unit
Used module:         \reg_forwarder
Used module:     \wb_stage
Used module:     \mem_slice_stage
Used module:     \exec_stage
Used module:         \mem_prep
Used module:         \branch_gen
Used module:         \alu
Used module:     \decode_stage
Used module:         \immed_gen
Used module:         \decoder
Used module:     \fetch_stage
Used module:         \prog_cntr
Removing unused module `\reg_file'.
Removed 1 unused modules.

19. Executing TRIBUF pass.

20. Executing HIERARCHY pass (managing design hierarchy).

20.1. Analyzing design hierarchy..
Top module:  \core
Used module:     \hazard_unit
Used module:     \fwd_unit
Used module:         \reg_forwarder
Used module:     \wb_stage
Used module:     \mem_slice_stage
Used module:     \exec_stage
Used module:         \mem_prep
Used module:         \branch_gen
Used module:         \alu
Used module:     \decode_stage
Used module:         \immed_gen
Used module:         \decoder
Used module:     \fetch_stage
Used module:         \prog_cntr

20.2. Analyzing design hierarchy..
Top module:  \core
Used module:     \hazard_unit
Used module:     \fwd_unit
Used module:         \reg_forwarder
Used module:     \wb_stage
Used module:     \mem_slice_stage
Used module:     \exec_stage
Used module:         \mem_prep
Used module:         \branch_gen
Used module:         \alu
Used module:     \decode_stage
Used module:         \immed_gen
Used module:         \decoder
Used module:     \fetch_stage
Used module:         \prog_cntr
Removed 0 unused modules.

21. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

22. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/openlane/designs/sv_core/src/hazard_unit.sv:73$145 in module hazard_unit.
Marked 1 switch rules as full_case in process $proc$/openlane/designs/sv_core/src/mem_prep.sv:0$108 in module mem_prep.
Marked 1 switch rules as full_case in process $proc$/openlane/designs/sv_core/src/decoder.sv:0$175 in module decoder.
Marked 1 switch rules as full_case in process $proc$/openlane/designs/sv_core/src/decoder.sv:0$168 in module decoder.
Removed 1 dead cases from process $proc$/openlane/designs/sv_core/src/wb_stage.sv:0$98 in module wb_stage.
Marked 1 switch rules as full_case in process $proc$/openlane/designs/sv_core/src/fetch_stage.sv:65$71 in module fetch_stage.
Removed 1 dead cases from process $proc$/openlane/designs/sv_core/src/fetch_stage.sv:0$70 in module fetch_stage.
Marked 1 switch rules as full_case in process $proc$/openlane/designs/sv_core/src/mem_slice_stage.sv:92$61 in module mem_slice_stage.
Removed 4 dead cases from process $proc$/openlane/designs/sv_core/src/mem_slice_stage.sv:0$37 in module mem_slice_stage.
Marked 4 switch rules as full_case in process $proc$/openlane/designs/sv_core/src/mem_slice_stage.sv:0$37 in module mem_slice_stage.
Marked 1 switch rules as full_case in process $proc$/openlane/designs/sv_core/src/decode_stage.sv:105$22 in module decode_stage.
Marked 1 switch rules as full_case in process $proc$/openlane/designs/sv_core/src/prog_cntr.sv:35$20 in module prog_cntr.
Marked 1 switch rules as full_case in process $proc$/openlane/designs/sv_core/src/exec_stage.sv:144$17 in module exec_stage.
Removed 1 dead cases from process $proc$/openlane/designs/sv_core/src/exec_stage.sv:0$2 in module exec_stage.
Removed 1 dead cases from process $proc$/openlane/designs/sv_core/src/exec_stage.sv:0$1 in module exec_stage.
Removed a total of 8 dead cases.

23. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 47 assignments to connections.

24. Executing PROC_INIT pass (extract init attributes).

25. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \rst_ni in `\hazard_unit.$proc$/openlane/designs/sv_core/src/hazard_unit.sv:73$145'.
Found async reset \rst_ni in `\fetch_stage.$proc$/openlane/designs/sv_core/src/fetch_stage.sv:65$71'.
Found async reset \rst_ni in `\mem_slice_stage.$proc$/openlane/designs/sv_core/src/mem_slice_stage.sv:92$61'.
Found async reset \rst_ni in `\decode_stage.$proc$/openlane/designs/sv_core/src/decode_stage.sv:105$22'.
Found async reset \rst_ni in `\prog_cntr.$proc$/openlane/designs/sv_core/src/prog_cntr.sv:35$20'.
Found async reset \rst_ni in `\exec_stage.$proc$/openlane/designs/sv_core/src/exec_stage.sv:144$17'.

26. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~24 debug messages>

27. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\hazard_unit.$proc$/openlane/designs/sv_core/src/hazard_unit.sv:0$147'.
Creating decoders for process `\hazard_unit.$proc$/openlane/designs/sv_core/src/hazard_unit.sv:73$145'.
     1/1: $0\PS[2:0]
Creating decoders for process `\fwd_unit.$proc$/openlane/designs/sv_core/src/fwd_unit.sv:0$126'.
Creating decoders for process `\reg_forwarder.$proc$/openlane/designs/sv_core/src/reg_forwarder.sv:0$114'.
Creating decoders for process `\mem_prep.$proc$/openlane/designs/sv_core/src/mem_prep.sv:0$108'.
     1/3: $1\req_strobe[3:0]
     2/3: $1\req_write_data[31:0]
     3/3: $1\illegal_addr[0:0]
Creating decoders for process `\decoder.$proc$/openlane/designs/sv_core/src/decoder.sv:184$193'.
Creating decoders for process `\decoder.$proc$/openlane/designs/sv_core/src/decoder.sv:179$191'.
Creating decoders for process `\decoder.$proc$/openlane/designs/sv_core/src/decoder.sv:0$175'.
     1/1: $1\rf_wr_src_o[1:0]
Creating decoders for process `\decoder.$proc$/openlane/designs/sv_core/src/decoder.sv:0$171'.
     1/1: $1\alu_b_src_o[1:0]
Creating decoders for process `\decoder.$proc$/openlane/designs/sv_core/src/decoder.sv:0$170'.
     1/1: $1\alu_a_src_o[1:0]
Creating decoders for process `\decoder.$proc$/openlane/designs/sv_core/src/decoder.sv:0$168'.
     1/2: $2\alu_op_o[3:0]
     2/2: $1\alu_op_o[3:0]
Creating decoders for process `\decoder.$proc$/openlane/designs/sv_core/src/decoder.sv:0$167'.
     1/1: $1\branch_op_o[2:0]
Creating decoders for process `\decoder.$proc$/openlane/designs/sv_core/src/decoder.sv:0$166'.
     1/1: $1\pc_src_o[0:0]
Creating decoders for process `\wb_stage.$proc$/openlane/designs/sv_core/src/wb_stage.sv:0$98'.
     1/1: $1\rf_wr_data[31:0]
Creating decoders for process `\branch_gen.$proc$/openlane/designs/sv_core/src/branch_gen.sv:0$94'.
     1/1: $1\taken_o[0:0]
Creating decoders for process `\immed_gen.$proc$/openlane/designs/sv_core/src/immed_gen.sv:27$89'.
Creating decoders for process `\alu.$proc$/openlane/designs/sv_core/src/alu.sv:0$76'.
     1/1: $1\out_o[31:0]
Creating decoders for process `\fetch_stage.$proc$/openlane/designs/sv_core/src/fetch_stage.sv:65$71'.
     1/3: $0\fetch_state_o[63:0] [63:32]
     2/3: $0\fetch_state_o[63:0] [31:0]
     3/3: $0\valid_o[0:0]
Creating decoders for process `\fetch_stage.$proc$/openlane/designs/sv_core/src/fetch_stage.sv:0$70'.
     1/1: $1\pc_data[31:0]
Creating decoders for process `\mem_slice_stage.$proc$/openlane/designs/sv_core/src/mem_slice_stage.sv:0$66'.
Creating decoders for process `\mem_slice_stage.$proc$/openlane/designs/sv_core/src/mem_slice_stage.sv:92$61'.
     1/17: $0\reg_meta_o[81:0] [5]
     2/17: $0\reg_meta_o[81:0] [4:0]
     3/17: $0\reg_meta_o[81:0] [37:6]
     4/17: $0\reg_meta_o[81:0] [42:38]
     5/17: $0\reg_meta_o[81:0] [43]
     6/17: $0\reg_meta_o[81:0] [75:44]
     7/17: $0\reg_meta_o[81:0] [80:76]
     8/17: $0\reg_meta_o[81:0] [81]
     9/17: $0\mem_state_o[102:0] [31:0]
    10/17: $0\mem_state_o[102:0] [34]
    11/17: $0\mem_state_o[102:0] [35]
    12/17: $0\mem_state_o[102:0] [37:36]
    13/17: $0\mem_state_o[102:0] [38]
    14/17: $0\mem_state_o[102:0] [70:39]
    15/17: $0\mem_state_o[102:0] [102:71]
    16/17: $0\mem_state_o[102:0] [33:32]
    17/17: $0\valid_o[0:0]
Creating decoders for process `\mem_slice_stage.$proc$/openlane/designs/sv_core/src/mem_slice_stage.sv:0$37'.
     1/14: $2$mem2reg_rd$\halfs$/openlane/designs/sv_core/src/mem_slice_stage.sv:78$33_DATA[15:0]$60
     2/14: $2$mem2reg_rd$\halfs$/openlane/designs/sv_core/src/mem_slice_stage.sv:77$32_DATA[15:0]$58
     3/14: $2$mem2reg_rd$\bytes$/openlane/designs/sv_core/src/mem_slice_stage.sv:74$31_DATA[7:0]$57
     4/14: $2$mem2reg_rd$\bytes$/openlane/designs/sv_core/src/mem_slice_stage.sv:73$30_DATA[7:0]$55
     5/14: $1\pre_data[31:0]
     6/14: $1$mem2reg_rd$\bytes$/openlane/designs/sv_core/src/mem_slice_stage.sv:74$31_DATA[7:0]$50
     7/14: $1$mem2reg_rd$\bytes$/openlane/designs/sv_core/src/mem_slice_stage.sv:74$31_ADDR[1:0]$49
     8/14: $1\sign_ext[0:0]
     9/14: $1$mem2reg_rd$\bytes$/openlane/designs/sv_core/src/mem_slice_stage.sv:73$30_DATA[7:0]$48
    10/14: $1$mem2reg_rd$\bytes$/openlane/designs/sv_core/src/mem_slice_stage.sv:73$30_ADDR[1:0]$47
    11/14: $1$mem2reg_rd$\halfs$/openlane/designs/sv_core/src/mem_slice_stage.sv:78$33_DATA[15:0]$54
    12/14: $1$mem2reg_rd$\halfs$/openlane/designs/sv_core/src/mem_slice_stage.sv:78$33_ADDR[0:0]$53
    13/14: $1$mem2reg_rd$\halfs$/openlane/designs/sv_core/src/mem_slice_stage.sv:77$32_DATA[15:0]$52
    14/14: $1$mem2reg_rd$\halfs$/openlane/designs/sv_core/src/mem_slice_stage.sv:77$32_ADDR[0:0]$51
Creating decoders for process `\decode_stage.$proc$/openlane/designs/sv_core/src/decode_stage.sv:105$22'.
     1/27: $0\reg_meta_o[81:0] [5]
     2/27: $0\reg_meta_o[81:0] [4:0]
     3/27: $0\reg_meta_o[81:0] [37:6]
     4/27: $0\reg_meta_o[81:0] [42:38]
     5/27: $0\reg_meta_o[81:0] [43]
     6/27: $0\reg_meta_o[81:0] [75:44]
     7/27: $0\reg_meta_o[81:0] [80:76]
     8/27: $0\reg_meta_o[81:0] [81]
     9/27: $0\decode_state_o[243:0] [1:0]
    10/27: $0\decode_state_o[243:0] [3]
    11/27: $0\decode_state_o[243:0] [4]
    12/27: $0\decode_state_o[243:0] [6:5]
    13/27: $0\decode_state_o[243:0] [7]
    14/27: $0\decode_state_o[243:0] [39:8]
    15/27: $0\decode_state_o[243:0] [71:40]
    16/27: $0\decode_state_o[243:0] [103:72]
    17/27: $0\decode_state_o[243:0] [135:104]
    18/27: $0\decode_state_o[243:0] [167:136]
    19/27: $0\decode_state_o[243:0] [199:168]
    20/27: $0\decode_state_o[243:0] [231:200]
    21/27: $0\decode_state_o[243:0] [233:232]
    22/27: $0\decode_state_o[243:0] [235:234]
    23/27: $0\decode_state_o[243:0] [239:236]
    24/27: $0\decode_state_o[243:0] [242:240]
    25/27: $0\decode_state_o[243:0] [243]
    26/27: $0\decode_state_o[243:0] [2]
    27/27: $0\valid_o[0:0]
Creating decoders for process `\prog_cntr.$proc$/openlane/designs/sv_core/src/prog_cntr.sv:35$20'.
     1/1: $0\count_o[31:0]
Creating decoders for process `\exec_stage.$proc$/openlane/designs/sv_core/src/exec_stage.sv:144$17'.
     1/21: $0\data_fwd_o[39:0] [32:1]
     2/21: $0\data_fwd_o[39:0] [0]
     3/21: $0\data_fwd_o[39:0] [37:33]
     4/21: $0\data_fwd_o[39:0] [38]
     5/21: $0\data_fwd_o[39:0] [39]
     6/21: $0\reg_meta_o[81:0] [4:0]
     7/21: $0\reg_meta_o[81:0] [37:6]
     8/21: $0\reg_meta_o[81:0] [42:38]
     9/21: $0\reg_meta_o[81:0] [43]
    10/21: $0\reg_meta_o[81:0] [75:44]
    11/21: $0\reg_meta_o[81:0] [80:76]
    12/21: $0\reg_meta_o[81:0] [81]
    13/21: $0\exec_state_o[70:0] [1:0]
    14/21: $0\exec_state_o[70:0] [3]
    15/21: $0\exec_state_o[70:0] [5:4]
    16/21: $0\exec_state_o[70:0] [6]
    17/21: $0\exec_state_o[70:0] [38:7]
    18/21: $0\exec_state_o[70:0] [70:39]
    19/21: $0\exec_state_o[70:0] [2]
    20/21: $0\valid_o[0:0]
    21/21: $0\reg_meta_o[81:0] [5]
Creating decoders for process `\exec_stage.$proc$/openlane/designs/sv_core/src/exec_stage.sv:0$2'.
     1/1: $1\alu_b_in[31:0]
Creating decoders for process `\exec_stage.$proc$/openlane/designs/sv_core/src/exec_stage.sv:0$1'.
     1/1: $1\alu_a_in[31:0]

28. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\hazard_unit.\flush_in_progess' from process `\hazard_unit.$proc$/openlane/designs/sv_core/src/hazard_unit.sv:0$147'.
No latch inferred for signal `\fwd_unit.\load_use_stall_ao' from process `\fwd_unit.$proc$/openlane/designs/sv_core/src/fwd_unit.sv:0$126'.
No latch inferred for signal `\fwd_unit.\dest_meta_o' from process `\fwd_unit.$proc$/openlane/designs/sv_core/src/fwd_unit.sv:0$126'.
No latch inferred for signal `\reg_forwarder.\rs_data_ao' from process `\reg_forwarder.$proc$/openlane/designs/sv_core/src/reg_forwarder.sv:0$114'.
No latch inferred for signal `\reg_forwarder.\load_use_hazard_ao' from process `\reg_forwarder.$proc$/openlane/designs/sv_core/src/reg_forwarder.sv:0$114'.
No latch inferred for signal `\reg_forwarder.\mem_conflict' from process `\reg_forwarder.$proc$/openlane/designs/sv_core/src/reg_forwarder.sv:0$114'.
No latch inferred for signal `\reg_forwarder.\ex_conflict' from process `\reg_forwarder.$proc$/openlane/designs/sv_core/src/reg_forwarder.sv:0$114'.
No latch inferred for signal `\reg_forwarder.\mem_raw' from process `\reg_forwarder.$proc$/openlane/designs/sv_core/src/reg_forwarder.sv:0$114'.
No latch inferred for signal `\reg_forwarder.\ex_raw' from process `\reg_forwarder.$proc$/openlane/designs/sv_core/src/reg_forwarder.sv:0$114'.
No latch inferred for signal `\reg_forwarder.\data_updated_mem' from process `\reg_forwarder.$proc$/openlane/designs/sv_core/src/reg_forwarder.sv:0$114'.
No latch inferred for signal `\mem_prep.\illegal_addr' from process `\mem_prep.$proc$/openlane/designs/sv_core/src/mem_prep.sv:0$108'.
No latch inferred for signal `\mem_prep.\req_strobe' from process `\mem_prep.$proc$/openlane/designs/sv_core/src/mem_prep.sv:0$108'.
No latch inferred for signal `\mem_prep.\req_write_data' from process `\mem_prep.$proc$/openlane/designs/sv_core/src/mem_prep.sv:0$108'.
No latch inferred for signal `\decoder.\func7_unused' from process `\decoder.$proc$/openlane/designs/sv_core/src/decoder.sv:184$193'.
No latch inferred for signal `\decoder.\inst_unused' from process `\decoder.$proc$/openlane/designs/sv_core/src/decoder.sv:179$191'.
No latch inferred for signal `\decoder.\rf_wr_src_o' from process `\decoder.$proc$/openlane/designs/sv_core/src/decoder.sv:0$175'.
No latch inferred for signal `\decoder.\alu_b_src_o' from process `\decoder.$proc$/openlane/designs/sv_core/src/decoder.sv:0$171'.
No latch inferred for signal `\decoder.\alu_a_src_o' from process `\decoder.$proc$/openlane/designs/sv_core/src/decoder.sv:0$170'.
No latch inferred for signal `\decoder.\alu_op_o' from process `\decoder.$proc$/openlane/designs/sv_core/src/decoder.sv:0$168'.
No latch inferred for signal `\decoder.\branch_op_o' from process `\decoder.$proc$/openlane/designs/sv_core/src/decoder.sv:0$167'.
No latch inferred for signal `\decoder.\pc_src_o' from process `\decoder.$proc$/openlane/designs/sv_core/src/decoder.sv:0$166'.
No latch inferred for signal `\wb_stage.\rf_wr_data' from process `\wb_stage.$proc$/openlane/designs/sv_core/src/wb_stage.sv:0$98'.
No latch inferred for signal `\branch_gen.\taken_o' from process `\branch_gen.$proc$/openlane/designs/sv_core/src/branch_gen.sv:0$94'.
No latch inferred for signal `\immed_gen.\inst_unused' from process `\immed_gen.$proc$/openlane/designs/sv_core/src/immed_gen.sv:27$89'.
No latch inferred for signal `\alu.\out_o' from process `\alu.$proc$/openlane/designs/sv_core/src/alu.sv:0$76'.
No latch inferred for signal `\fetch_stage.\pc_data' from process `\fetch_stage.$proc$/openlane/designs/sv_core/src/fetch_stage.sv:0$70'.
No latch inferred for signal `\mem_slice_stage.\bytes[0]' from process `\mem_slice_stage.$proc$/openlane/designs/sv_core/src/mem_slice_stage.sv:0$66'.
No latch inferred for signal `\mem_slice_stage.\bytes[1]' from process `\mem_slice_stage.$proc$/openlane/designs/sv_core/src/mem_slice_stage.sv:0$66'.
No latch inferred for signal `\mem_slice_stage.\bytes[2]' from process `\mem_slice_stage.$proc$/openlane/designs/sv_core/src/mem_slice_stage.sv:0$66'.
No latch inferred for signal `\mem_slice_stage.\bytes[3]' from process `\mem_slice_stage.$proc$/openlane/designs/sv_core/src/mem_slice_stage.sv:0$66'.
No latch inferred for signal `\mem_slice_stage.\halfs[0]' from process `\mem_slice_stage.$proc$/openlane/designs/sv_core/src/mem_slice_stage.sv:0$66'.
No latch inferred for signal `\mem_slice_stage.\halfs[1]' from process `\mem_slice_stage.$proc$/openlane/designs/sv_core/src/mem_slice_stage.sv:0$66'.
No latch inferred for signal `\mem_slice_stage.\pre_data' from process `\mem_slice_stage.$proc$/openlane/designs/sv_core/src/mem_slice_stage.sv:0$37'.
No latch inferred for signal `\mem_slice_stage.\sign' from process `\mem_slice_stage.$proc$/openlane/designs/sv_core/src/mem_slice_stage.sv:0$37'.
No latch inferred for signal `\mem_slice_stage.\sign_ext' from process `\mem_slice_stage.$proc$/openlane/designs/sv_core/src/mem_slice_stage.sv:0$37'.
No latch inferred for signal `\mem_slice_stage.$mem2reg_rd$\bytes$/openlane/designs/sv_core/src/mem_slice_stage.sv:73$30_ADDR' from process `\mem_slice_stage.$proc$/openlane/designs/sv_core/src/mem_slice_stage.sv:0$37'.
No latch inferred for signal `\mem_slice_stage.$mem2reg_rd$\bytes$/openlane/designs/sv_core/src/mem_slice_stage.sv:73$30_DATA' from process `\mem_slice_stage.$proc$/openlane/designs/sv_core/src/mem_slice_stage.sv:0$37'.
No latch inferred for signal `\mem_slice_stage.$mem2reg_rd$\bytes$/openlane/designs/sv_core/src/mem_slice_stage.sv:74$31_ADDR' from process `\mem_slice_stage.$proc$/openlane/designs/sv_core/src/mem_slice_stage.sv:0$37'.
No latch inferred for signal `\mem_slice_stage.$mem2reg_rd$\bytes$/openlane/designs/sv_core/src/mem_slice_stage.sv:74$31_DATA' from process `\mem_slice_stage.$proc$/openlane/designs/sv_core/src/mem_slice_stage.sv:0$37'.
No latch inferred for signal `\mem_slice_stage.$mem2reg_rd$\halfs$/openlane/designs/sv_core/src/mem_slice_stage.sv:77$32_ADDR' from process `\mem_slice_stage.$proc$/openlane/designs/sv_core/src/mem_slice_stage.sv:0$37'.
No latch inferred for signal `\mem_slice_stage.$mem2reg_rd$\halfs$/openlane/designs/sv_core/src/mem_slice_stage.sv:77$32_DATA' from process `\mem_slice_stage.$proc$/openlane/designs/sv_core/src/mem_slice_stage.sv:0$37'.
No latch inferred for signal `\mem_slice_stage.$mem2reg_rd$\halfs$/openlane/designs/sv_core/src/mem_slice_stage.sv:78$33_ADDR' from process `\mem_slice_stage.$proc$/openlane/designs/sv_core/src/mem_slice_stage.sv:0$37'.
No latch inferred for signal `\mem_slice_stage.$mem2reg_rd$\halfs$/openlane/designs/sv_core/src/mem_slice_stage.sv:78$33_DATA' from process `\mem_slice_stage.$proc$/openlane/designs/sv_core/src/mem_slice_stage.sv:0$37'.
No latch inferred for signal `\exec_stage.\alu_b_in' from process `\exec_stage.$proc$/openlane/designs/sv_core/src/exec_stage.sv:0$2'.
No latch inferred for signal `\exec_stage.\alu_a_in' from process `\exec_stage.$proc$/openlane/designs/sv_core/src/exec_stage.sv:0$1'.

29. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\hazard_unit.\PS' using process `\hazard_unit.$proc$/openlane/designs/sv_core/src/hazard_unit.sv:73$145'.
  created $adff cell `$procdff$511' with positive edge clock and negative level reset.
Creating register for signal `\fetch_stage.\valid_o' using process `\fetch_stage.$proc$/openlane/designs/sv_core/src/fetch_stage.sv:65$71'.
  created $adff cell `$procdff$512' with positive edge clock and negative level reset.
Creating register for signal `\fetch_stage.\fetch_state_o' using process `\fetch_stage.$proc$/openlane/designs/sv_core/src/fetch_stage.sv:65$71'.
  created $adff cell `$procdff$513' with positive edge clock and negative level reset.
Creating register for signal `\mem_slice_stage.\valid_o' using process `\mem_slice_stage.$proc$/openlane/designs/sv_core/src/mem_slice_stage.sv:92$61'.
  created $adff cell `$procdff$514' with positive edge clock and negative level reset.
Creating register for signal `\mem_slice_stage.\reg_meta_o' using process `\mem_slice_stage.$proc$/openlane/designs/sv_core/src/mem_slice_stage.sv:92$61'.
  created $adff cell `$procdff$515' with positive edge clock and negative level reset.
Creating register for signal `\mem_slice_stage.\mem_state_o' using process `\mem_slice_stage.$proc$/openlane/designs/sv_core/src/mem_slice_stage.sv:92$61'.
  created $adff cell `$procdff$516' with positive edge clock and negative level reset.
Creating register for signal `\decode_stage.\valid_o' using process `\decode_stage.$proc$/openlane/designs/sv_core/src/decode_stage.sv:105$22'.
  created $dff cell `$procdff$519' with positive edge clock.
Creating register for signal `\decode_stage.\reg_meta_o' using process `\decode_stage.$proc$/openlane/designs/sv_core/src/decode_stage.sv:105$22'.
  created $adff cell `$procdff$520' with positive edge clock and negative level reset.
Creating register for signal `\decode_stage.\decode_state_o' using process `\decode_stage.$proc$/openlane/designs/sv_core/src/decode_stage.sv:105$22'.
  created $adff cell `$procdff$521' with positive edge clock and negative level reset.
Creating register for signal `\prog_cntr.\count_o' using process `\prog_cntr.$proc$/openlane/designs/sv_core/src/prog_cntr.sv:35$20'.
  created $adff cell `$procdff$522' with positive edge clock and negative level reset.
Creating register for signal `\exec_stage.\data_fwd_o' using process `\exec_stage.$proc$/openlane/designs/sv_core/src/exec_stage.sv:144$17'.
  created $dff cell `$procdff$525' with positive edge clock.
Creating register for signal `\exec_stage.\valid_o' using process `\exec_stage.$proc$/openlane/designs/sv_core/src/exec_stage.sv:144$17'.
  created $adff cell `$procdff$526' with positive edge clock and negative level reset.
Creating register for signal `\exec_stage.\exec_state_o' using process `\exec_stage.$proc$/openlane/designs/sv_core/src/exec_stage.sv:144$17'.
  created $adff cell `$procdff$527' with positive edge clock and negative level reset.
Creating register for signal `\exec_stage.\reg_meta_o' using process `\exec_stage.$proc$/openlane/designs/sv_core/src/exec_stage.sv:144$17'.
  created $adff cell `$procdff$528' with positive edge clock and negative level reset.

30. Executing PROC_MEMWR pass (convert process memory writes to cells).

31. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `hazard_unit.$proc$/openlane/designs/sv_core/src/hazard_unit.sv:0$147'.
Removing empty process `hazard_unit.$proc$/openlane/designs/sv_core/src/hazard_unit.sv:73$145'.
Removing empty process `fwd_unit.$proc$/openlane/designs/sv_core/src/fwd_unit.sv:0$126'.
Removing empty process `reg_forwarder.$proc$/openlane/designs/sv_core/src/reg_forwarder.sv:0$114'.
Found and cleaned up 1 empty switch in `\mem_prep.$proc$/openlane/designs/sv_core/src/mem_prep.sv:0$108'.
Removing empty process `mem_prep.$proc$/openlane/designs/sv_core/src/mem_prep.sv:0$108'.
Removing empty process `decoder.$proc$/openlane/designs/sv_core/src/decoder.sv:184$193'.
Removing empty process `decoder.$proc$/openlane/designs/sv_core/src/decoder.sv:179$191'.
Found and cleaned up 1 empty switch in `\decoder.$proc$/openlane/designs/sv_core/src/decoder.sv:0$175'.
Removing empty process `decoder.$proc$/openlane/designs/sv_core/src/decoder.sv:0$175'.
Found and cleaned up 1 empty switch in `\decoder.$proc$/openlane/designs/sv_core/src/decoder.sv:0$171'.
Removing empty process `decoder.$proc$/openlane/designs/sv_core/src/decoder.sv:0$171'.
Found and cleaned up 1 empty switch in `\decoder.$proc$/openlane/designs/sv_core/src/decoder.sv:0$170'.
Removing empty process `decoder.$proc$/openlane/designs/sv_core/src/decoder.sv:0$170'.
Found and cleaned up 2 empty switches in `\decoder.$proc$/openlane/designs/sv_core/src/decoder.sv:0$168'.
Removing empty process `decoder.$proc$/openlane/designs/sv_core/src/decoder.sv:0$168'.
Found and cleaned up 1 empty switch in `\decoder.$proc$/openlane/designs/sv_core/src/decoder.sv:0$167'.
Removing empty process `decoder.$proc$/openlane/designs/sv_core/src/decoder.sv:0$167'.
Found and cleaned up 1 empty switch in `\decoder.$proc$/openlane/designs/sv_core/src/decoder.sv:0$166'.
Removing empty process `decoder.$proc$/openlane/designs/sv_core/src/decoder.sv:0$166'.
Found and cleaned up 1 empty switch in `\wb_stage.$proc$/openlane/designs/sv_core/src/wb_stage.sv:0$98'.
Removing empty process `wb_stage.$proc$/openlane/designs/sv_core/src/wb_stage.sv:0$98'.
Found and cleaned up 1 empty switch in `\branch_gen.$proc$/openlane/designs/sv_core/src/branch_gen.sv:0$94'.
Removing empty process `branch_gen.$proc$/openlane/designs/sv_core/src/branch_gen.sv:0$94'.
Removing empty process `immed_gen.$proc$/openlane/designs/sv_core/src/immed_gen.sv:27$89'.
Found and cleaned up 1 empty switch in `\alu.$proc$/openlane/designs/sv_core/src/alu.sv:0$76'.
Removing empty process `alu.$proc$/openlane/designs/sv_core/src/alu.sv:0$76'.
Found and cleaned up 1 empty switch in `\fetch_stage.$proc$/openlane/designs/sv_core/src/fetch_stage.sv:65$71'.
Removing empty process `fetch_stage.$proc$/openlane/designs/sv_core/src/fetch_stage.sv:65$71'.
Found and cleaned up 1 empty switch in `\fetch_stage.$proc$/openlane/designs/sv_core/src/fetch_stage.sv:0$70'.
Removing empty process `fetch_stage.$proc$/openlane/designs/sv_core/src/fetch_stage.sv:0$70'.
Removing empty process `mem_slice_stage.$proc$/openlane/designs/sv_core/src/mem_slice_stage.sv:0$66'.
Found and cleaned up 1 empty switch in `\mem_slice_stage.$proc$/openlane/designs/sv_core/src/mem_slice_stage.sv:92$61'.
Removing empty process `mem_slice_stage.$proc$/openlane/designs/sv_core/src/mem_slice_stage.sv:92$61'.
Found and cleaned up 5 empty switches in `\mem_slice_stage.$proc$/openlane/designs/sv_core/src/mem_slice_stage.sv:0$37'.
Removing empty process `mem_slice_stage.$proc$/openlane/designs/sv_core/src/mem_slice_stage.sv:0$37'.
Found and cleaned up 1 empty switch in `\decode_stage.$proc$/openlane/designs/sv_core/src/decode_stage.sv:105$22'.
Removing empty process `decode_stage.$proc$/openlane/designs/sv_core/src/decode_stage.sv:105$22'.
Found and cleaned up 1 empty switch in `\prog_cntr.$proc$/openlane/designs/sv_core/src/prog_cntr.sv:35$20'.
Removing empty process `prog_cntr.$proc$/openlane/designs/sv_core/src/prog_cntr.sv:35$20'.
Found and cleaned up 1 empty switch in `\exec_stage.$proc$/openlane/designs/sv_core/src/exec_stage.sv:144$17'.
Removing empty process `exec_stage.$proc$/openlane/designs/sv_core/src/exec_stage.sv:144$17'.
Found and cleaned up 1 empty switch in `\exec_stage.$proc$/openlane/designs/sv_core/src/exec_stage.sv:0$2'.
Removing empty process `exec_stage.$proc$/openlane/designs/sv_core/src/exec_stage.sv:0$2'.
Found and cleaned up 1 empty switch in `\exec_stage.$proc$/openlane/designs/sv_core/src/exec_stage.sv:0$1'.
Removing empty process `exec_stage.$proc$/openlane/designs/sv_core/src/exec_stage.sv:0$1'.
Cleaned up 24 empty switches.

32. Executing OPT_EXPR pass (perform const folding).
Optimizing module core.
Optimizing module hazard_unit.
<suppressed ~4 debug messages>
Optimizing module fwd_unit.
Optimizing module reg_forwarder.
Optimizing module mem_prep.
<suppressed ~4 debug messages>
Optimizing module decoder.
<suppressed ~2 debug messages>
Optimizing module wb_stage.
<suppressed ~1 debug messages>
Optimizing module branch_gen.
<suppressed ~1 debug messages>
Optimizing module immed_gen.
<suppressed ~1 debug messages>
Optimizing module alu.
<suppressed ~1 debug messages>
Optimizing module fetch_stage.
<suppressed ~5 debug messages>
Optimizing module mem_slice_stage.
<suppressed ~30 debug messages>
Optimizing module decode_stage.
<suppressed ~29 debug messages>
Optimizing module prog_cntr.
Optimizing module exec_stage.
<suppressed ~23 debug messages>

33. Executing FLATTEN pass (flatten design).
Deleting now unused module hazard_unit.
Deleting now unused module fwd_unit.
Deleting now unused module reg_forwarder.
Deleting now unused module mem_prep.
Deleting now unused module decoder.
Deleting now unused module wb_stage.
Deleting now unused module branch_gen.
Deleting now unused module immed_gen.
Deleting now unused module alu.
Deleting now unused module fetch_stage.
Deleting now unused module mem_slice_stage.
Deleting now unused module decode_stage.
Deleting now unused module prog_cntr.
Deleting now unused module exec_stage.
<suppressed ~15 debug messages>

34. Executing OPT_EXPR pass (perform const folding).
Optimizing module core.
<suppressed ~55 debug messages>

35. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..
Removed 39 unused cells and 369 unused wires.
<suppressed ~49 debug messages>

36. Executing CHECK pass (checking for obvious problems).
Checking module core...
Found and reported 0 problems.

37. Executing OPT pass (performing simple optimizations).

37.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module core.

37.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\core'.
<suppressed ~105 debug messages>
Removed a total of 35 cells.

37.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \core..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $flatten\i_decode_stage.\i_decoder.$procmux$240.
    dead port 2/2 on $mux $flatten\i_mem_slice_stage.$procmux$328.
    dead port 2/2 on $mux $flatten\i_mem_slice_stage.$procmux$345.
Removed 3 multiplexer ports.
<suppressed ~45 debug messages>

37.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \core.
    New ctrl vector for $pmux cell $flatten\i_decode_stage.\i_decoder.$procmux$214: { $auto$opt_reduce.cc:134:opt_pmux$530 \i_decode_stage.mem_read $flatten\i_decode_stage.\i_decoder.$procmux$215_CMP }
    New ctrl vector for $pmux cell $flatten\i_decode_stage.\i_decoder.$procmux$220: { $auto$opt_reduce.cc:134:opt_pmux$534 $flatten\i_decode_stage.\i_decoder.$eq$/openlane/designs/sv_core/src/decoder.sv:156$182_Y $auto$opt_reduce.cc:134:opt_pmux$532 }
    New ctrl vector for $pmux cell $flatten\i_decode_stage.\i_decoder.$procmux$229: { $auto$opt_reduce.cc:134:opt_pmux$536 $flatten\i_decode_stage.\i_decoder.$procmux$218_CMP $flatten\i_decode_stage.\i_decoder.$eq$/openlane/designs/sv_core/src/decoder.sv:155$181_Y }
    New ctrl vector for $pmux cell $flatten\i_decode_stage.\i_decoder.$procmux$251: $auto$opt_reduce.cc:134:opt_pmux$538
  Optimizing cells in module \core.
Performed a total of 4 changes.

37.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\core'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

37.6. Executing OPT_DFF pass (perform DFF optimizations).

37.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..
Removed 0 unused cells and 39 unused wires.
<suppressed ~1 debug messages>

37.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module core.

37.9. Rerunning OPT passes. (Maybe there is more to do..)

37.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \core..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~47 debug messages>

37.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \core.
Performed a total of 0 changes.

37.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\core'.
Removed a total of 0 cells.

37.13. Executing OPT_DFF pass (perform DFF optimizations).

37.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..

37.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module core.

37.16. Finished OPT passes. (There is nothing left to do.)

38. Executing FSM pass (extract and optimize FSM).

38.1. Executing FSM_DETECT pass (finding FSMs in design).

38.2. Executing FSM_EXTRACT pass (extracting FSM from design).

38.3. Executing FSM_OPT pass (simple optimizations of FSMs).

38.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..

38.5. Executing FSM_OPT pass (simple optimizations of FSMs).

38.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

38.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

38.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

39. Executing OPT pass (performing simple optimizations).

39.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module core.

39.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\core'.
Removed a total of 0 cells.

39.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \core..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~47 debug messages>

39.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \core.
Performed a total of 0 changes.

39.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\core'.
Removed a total of 0 cells.

39.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $flatten\i_fetch_stage.\i_prog_cntr.$procdff$522 ($adff) from module core (D = \i_fetch_stage.i_prog_cntr.data_i, Q = \i_fetch_stage.i_prog_cntr.count_o).
Adding EN signal on $flatten\i_fetch_stage.$procdff$513 ($adff) from module core (D = { \i_fetch_stage.i_prog_cntr.count_o \i_fetch_stage.pc_plus_4 }, Q = \i_fetch_stage.fetch_state_o).
Adding EN signal on $flatten\i_fetch_stage.$procdff$512 ($adff) from module core (D = $flatten\i_fetch_stage.$logic_and$/openlane/designs/sv_core/src/fetch_stage.sv:71$75_Y, Q = \i_fetch_stage.valid_o).
Adding EN signal on $flatten\i_exec_stage.$procdff$525 ($dff) from module core (D = { \i_decode_stage.decode_state_o [7] \dmem_rd \i_decode_stage.reg_meta_o [4:0] \i_fetch_stage.target_addr_i \i_exec_stage.valid }, Q = \i_exec_stage.data_fwd_o).
Adding EN signal on $flatten\i_decode_stage.$procdff$521 ($adff) from module core (D = { \i_decode_stage.pc_src \i_decode_stage.branch_op \i_decode_stage.alu_op \i_decode_stage.alu_a_src \i_decode_stage.alu_b_src \imem_rdata_i [31] \imem_rdata_i [31] \imem_rdata_i [31] \imem_rdata_i [31] \imem_rdata_i [31] \imem_rdata_i [31] \imem_rdata_i [31] \imem_rdata_i [31] \imem_rdata_i [31] \imem_rdata_i [31] \imem_rdata_i [31] \imem_rdata_i [31] \imem_rdata_i [31] \imem_rdata_i [31] \imem_rdata_i [31] \imem_rdata_i [31] \imem_rdata_i [31] \imem_rdata_i [31] \imem_rdata_i [31] \imem_rdata_i [31] \imem_rdata_i [31:20] \imem_rdata_i [31] \imem_rdata_i [31] \imem_rdata_i [31] \imem_rdata_i [31] \imem_rdata_i [31] \imem_rdata_i [31] \imem_rdata_i [31] \imem_rdata_i [31] \imem_rdata_i [31] \imem_rdata_i [31] \imem_rdata_i [31] \imem_rdata_i [31] \imem_rdata_i [31] \imem_rdata_i [31] \imem_rdata_i [31] \imem_rdata_i [31] \imem_rdata_i [31] \imem_rdata_i [31] \imem_rdata_i [31] \imem_rdata_i [31] \imem_rdata_i [31:25] \imem_rdata_i [11:7] \imem_rdata_i [31] \imem_rdata_i [31] \imem_rdata_i [31] \imem_rdata_i [31] \imem_rdata_i [31] \imem_rdata_i [31] \imem_rdata_i [31] \imem_rdata_i [31] \imem_rdata_i [31] \imem_rdata_i [31] \imem_rdata_i [31] \imem_rdata_i [31] \imem_rdata_i [31] \imem_rdata_i [31] \imem_rdata_i [31] \imem_rdata_i [31] \imem_rdata_i [31] \imem_rdata_i [31] \imem_rdata_i [31] \imem_rdata_i [31] \imem_rdata_i [7] \imem_rdata_i [30:25] \imem_rdata_i [11:8] 1'0 \imem_rdata_i [31:12] 12'000000000000 \imem_rdata_i [31] \imem_rdata_i [31] \imem_rdata_i [31] \imem_rdata_i [31] \imem_rdata_i [31] \imem_rdata_i [31] \imem_rdata_i [31] \imem_rdata_i [31] \imem_rdata_i [31] \imem_rdata_i [31] \imem_rdata_i [31] \imem_rdata_i [31] \imem_rdata_i [19:12] \imem_rdata_i [20] \imem_rdata_i [30:21] 1'0 \i_fetch_stage.fetch_state_o $flatten\i_decode_stage.$logic_and$/openlane/designs/sv_core/src/decode_stage.sv:131$29_Y \i_decode_stage.rf_wr_src \i_decode_stage.mem_read \i_decode_stage.mem_write \imem_rdata_i [14:12] }, Q = \i_decode_stage.decode_state_o).
Adding EN signal on $flatten\i_decode_stage.$procdff$520 ($adff) from module core (D = { \i_decode_stage.rs1_used \imem_rdata_i [19:15] \rf_rs1_i \i_decode_stage.rs2_used \imem_rdata_i [24:20] \rf_rs2_i \i_decode_stage.i_decoder.rf_wr_en_o \imem_rdata_i [11:7] }, Q = \i_decode_stage.reg_meta_o).
Adding EN signal on $flatten\i_decode_stage.$procdff$519 ($dff) from module core (D = $flatten\i_decode_stage.$and$/openlane/designs/sv_core/src/decode_stage.sv:111$26_Y, Q = \i_decode_stage.valid_o).
Setting constant 0-bit at position 72 on $auto$ff.cc:266:slice$543 ($adffe) from module core.
Setting constant 0-bit at position 104 on $auto$ff.cc:266:slice$543 ($adffe) from module core.
Setting constant 0-bit at position 105 on $auto$ff.cc:266:slice$543 ($adffe) from module core.
Setting constant 0-bit at position 106 on $auto$ff.cc:266:slice$543 ($adffe) from module core.
Setting constant 0-bit at position 107 on $auto$ff.cc:266:slice$543 ($adffe) from module core.
Setting constant 0-bit at position 108 on $auto$ff.cc:266:slice$543 ($adffe) from module core.
Setting constant 0-bit at position 109 on $auto$ff.cc:266:slice$543 ($adffe) from module core.
Setting constant 0-bit at position 110 on $auto$ff.cc:266:slice$543 ($adffe) from module core.
Setting constant 0-bit at position 111 on $auto$ff.cc:266:slice$543 ($adffe) from module core.
Setting constant 0-bit at position 112 on $auto$ff.cc:266:slice$543 ($adffe) from module core.
Setting constant 0-bit at position 113 on $auto$ff.cc:266:slice$543 ($adffe) from module core.
Setting constant 0-bit at position 114 on $auto$ff.cc:266:slice$543 ($adffe) from module core.
Setting constant 0-bit at position 115 on $auto$ff.cc:266:slice$543 ($adffe) from module core.
Setting constant 0-bit at position 136 on $auto$ff.cc:266:slice$543 ($adffe) from module core.

39.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..
Removed 33 unused cells and 8 unused wires.
<suppressed ~34 debug messages>

39.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module core.

39.9. Rerunning OPT passes. (Maybe there is more to do..)

39.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \core..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~22 debug messages>

39.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \core.
Performed a total of 0 changes.

39.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\core'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

39.13. Executing OPT_DFF pass (perform DFF optimizations).

39.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

39.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module core.

39.16. Rerunning OPT passes. (Maybe there is more to do..)

39.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \core..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~22 debug messages>

39.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \core.
Performed a total of 0 changes.

39.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\core'.
Removed a total of 0 cells.

39.20. Executing OPT_DFF pass (perform DFF optimizations).

39.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..

39.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module core.

39.23. Finished OPT passes. (There is nothing left to do.)

40. Executing WREDUCE pass (reducing word size of cells).
Removed top 29 bits (of 32) from port B of cell core.$flatten\i_fetch_stage.$add$/openlane/designs/sv_core/src/fetch_stage.sv:36$69 ($add).
Removed top 1 bits (of 7) from port B of cell core.$flatten\i_decode_stage.\i_decoder.$ne$/openlane/designs/sv_core/src/decoder.sv:150$176 ($ne).
Removed top 2 bits (of 7) from port B of cell core.$flatten\i_decode_stage.\i_decoder.$ne$/openlane/designs/sv_core/src/decoder.sv:151$177 ($ne).
Removed top 1 bits (of 7) from port B of cell core.$flatten\i_decode_stage.\i_decoder.$eq$/openlane/designs/sv_core/src/decoder.sv:156$182 ($eq).
Removed top 1 bits (of 7) from port B of cell core.$flatten\i_decode_stage.\i_decoder.$eq$/openlane/designs/sv_core/src/decoder.sv:157$184 ($eq).
Removed top 5 bits (of 7) from port B of cell core.$flatten\i_decode_stage.\i_decoder.$eq$/openlane/designs/sv_core/src/decoder.sv:167$190 ($eq).
Removed top 2 bits (of 7) from port B of cell core.$flatten\i_decode_stage.\i_decoder.$procmux$221_CMP0 ($eq).
Removed top 2 bits (of 7) from port B of cell core.$flatten\i_decode_stage.\i_decoder.$procmux$227_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell core.$flatten\i_decode_stage.\i_decoder.$procmux$233_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell core.$flatten\i_decode_stage.\i_decoder.$ne$/openlane/designs/sv_core/src/decoder.sv:132$172 ($ne).
Removed top 3 bits (of 4) from port A of cell core.$flatten\i_exec_stage.\i_mem_prep.$shl$/openlane/designs/sv_core/src/mem_prep.sv:51$109 ($shl).
Removed top 2 bits (of 4) from port A of cell core.$flatten\i_exec_stage.\i_mem_prep.$shl$/openlane/designs/sv_core/src/mem_prep.sv:58$110 ($shl).
Removed top 1 bits (of 2) from port B of cell core.$flatten\i_exec_stage.\i_mem_prep.$procmux$201_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell core.$flatten\i_exec_stage.\i_branch_gen.$procmux$265_CMP0 ($eq).
Removed top 31 bits (of 32) from mux cell core.$flatten\i_exec_stage.\i_alu.$ternary$/openlane/designs/sv_core/src/alu.sv:42$86 ($mux).
Removed top 31 bits (of 32) from mux cell core.$flatten\i_exec_stage.\i_alu.$ternary$/openlane/designs/sv_core/src/alu.sv:43$88 ($mux).
Removed top 2 bits (of 4) from port B of cell core.$flatten\i_exec_stage.\i_alu.$procmux$270_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell core.$flatten\i_exec_stage.\i_alu.$procmux$271_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell core.$flatten\i_exec_stage.\i_alu.$procmux$273_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell core.$flatten\i_exec_stage.\i_alu.$procmux$274_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell core.$flatten\i_exec_stage.\i_alu.$procmux$275_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell core.$flatten\i_exec_stage.\i_alu.$procmux$276_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell core.$flatten\i_exec_stage.\i_alu.$procmux$277_CMP0 ($eq).
Removed top 1 bits (of 2) from port B of cell core.$flatten\i_exec_stage.$procmux$509_CMP0 ($eq).
Removed top 1 bits (of 2) from port B of cell core.$flatten\i_exec_stage.$procmux$504_CMP0 ($eq).
Removed top 77 bits (of 82) from FF cell core.$flatten\i_mem_slice_stage.$procdff$515 ($adff).
Removed top 1 bits (of 2) from port B of cell core.$flatten\i_mem_slice_stage.$procmux$343_CMP0 ($eq).
Removed top 1 bits (of 2) from port B of cell core.$flatten\i_mem_slice_stage.$procmux$329_CMP0 ($eq).
Removed top 1 bits (of 2) from port B of cell core.$flatten\i_wb_stage.$procmux$257_CMP0 ($eq).
Removed top 77 bits (of 82) from FF cell core.$flatten\i_exec_stage.$procdff$528 ($adff).
Removed top 31 bits (of 32) from wire core.$flatten\i_exec_stage.\i_alu.$ternary$/openlane/designs/sv_core/src/alu.sv:42$86_Y.
Removed top 31 bits (of 32) from wire core.$flatten\i_exec_stage.\i_alu.$ternary$/openlane/designs/sv_core/src/alu.sv:43$88_Y.

41. Executing PEEPOPT pass (run peephole optimizers).

42. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

43. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module core:
  creating $macc model for $flatten\i_exec_stage.\i_alu.$add$/openlane/designs/sv_core/src/alu.sv:34$77 ($add).
  creating $macc model for $flatten\i_exec_stage.\i_alu.$sub$/openlane/designs/sv_core/src/alu.sv:35$78 ($sub).
  creating $macc model for $flatten\i_fetch_stage.$add$/openlane/designs/sv_core/src/fetch_stage.sv:36$69 ($add).
  creating $alu model for $macc $flatten\i_fetch_stage.$add$/openlane/designs/sv_core/src/fetch_stage.sv:36$69.
  creating $alu model for $macc $flatten\i_exec_stage.\i_alu.$sub$/openlane/designs/sv_core/src/alu.sv:35$78.
  creating $alu model for $macc $flatten\i_exec_stage.\i_alu.$add$/openlane/designs/sv_core/src/alu.sv:34$77.
  creating $alu model for $flatten\i_exec_stage.\i_alu.$lt$/openlane/designs/sv_core/src/alu.sv:42$85 ($lt): new $alu
  creating $alu model for $flatten\i_exec_stage.\i_alu.$lt$/openlane/designs/sv_core/src/alu.sv:43$87 ($lt): merged with $flatten\i_exec_stage.\i_alu.$sub$/openlane/designs/sv_core/src/alu.sv:35$78.
  creating $alu model for $flatten\i_exec_stage.\i_branch_gen.$lt$/openlane/designs/sv_core/src/branch_gen.sv:16$92 ($lt): new $alu
  creating $alu model for $flatten\i_exec_stage.\i_branch_gen.$lt$/openlane/designs/sv_core/src/branch_gen.sv:17$93 ($lt): new $alu
  creating $alu model for $flatten\i_exec_stage.\i_branch_gen.$eq$/openlane/designs/sv_core/src/branch_gen.sv:15$91 ($eq): merged with $flatten\i_exec_stage.\i_branch_gen.$lt$/openlane/designs/sv_core/src/branch_gen.sv:17$93.
  creating $alu cell for $flatten\i_exec_stage.\i_branch_gen.$lt$/openlane/designs/sv_core/src/branch_gen.sv:17$93, $flatten\i_exec_stage.\i_branch_gen.$eq$/openlane/designs/sv_core/src/branch_gen.sv:15$91: $auto$alumacc.cc:485:replace_alu$556
  creating $alu cell for $flatten\i_exec_stage.\i_branch_gen.$lt$/openlane/designs/sv_core/src/branch_gen.sv:16$92: $auto$alumacc.cc:485:replace_alu$563
  creating $alu cell for $flatten\i_exec_stage.\i_alu.$lt$/openlane/designs/sv_core/src/alu.sv:42$85: $auto$alumacc.cc:485:replace_alu$570
  creating $alu cell for $flatten\i_exec_stage.\i_alu.$add$/openlane/designs/sv_core/src/alu.sv:34$77: $auto$alumacc.cc:485:replace_alu$577
  creating $alu cell for $flatten\i_exec_stage.\i_alu.$sub$/openlane/designs/sv_core/src/alu.sv:35$78, $flatten\i_exec_stage.\i_alu.$lt$/openlane/designs/sv_core/src/alu.sv:43$87: $auto$alumacc.cc:485:replace_alu$580
  creating $alu cell for $flatten\i_fetch_stage.$add$/openlane/designs/sv_core/src/fetch_stage.sv:36$69: $auto$alumacc.cc:485:replace_alu$585
  created 6 $alu and 0 $macc cells.

44. Executing SHARE pass (SAT-based resource sharing).
Found 3 cells in module core that may be considered for resource sharing.
  Analyzing resource sharing options for $flatten\i_exec_stage.\i_alu.$sshr$/openlane/designs/sv_core/src/alu.sv:41$84 ($sshr):
    Found 1 activation_patterns using ctrl signal $flatten\i_exec_stage.\i_alu.$procmux$272_CMP.
    No candidates found.
  Analyzing resource sharing options for $flatten\i_exec_stage.\i_alu.$shr$/openlane/designs/sv_core/src/alu.sv:39$82 ($shr):
    Found 1 activation_patterns using ctrl signal $flatten\i_exec_stage.\i_alu.$procmux$274_CMP.
    No candidates found.
  Analyzing resource sharing options for $flatten\i_exec_stage.\i_alu.$shl$/openlane/designs/sv_core/src/alu.sv:40$83 ($shl):
    Found 1 activation_patterns using ctrl signal $flatten\i_exec_stage.\i_alu.$procmux$273_CMP.
    No candidates found.

45. Executing OPT pass (performing simple optimizations).

45.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module core.
<suppressed ~2 debug messages>

45.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\core'.
Removed a total of 0 cells.

45.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \core..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~22 debug messages>

45.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \core.
Performed a total of 0 changes.

45.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\core'.
Removed a total of 0 cells.

45.6. Executing OPT_DFF pass (perform DFF optimizations).

45.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..
Removed 1 unused cells and 7 unused wires.
<suppressed ~2 debug messages>

45.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module core.

45.9. Rerunning OPT passes. (Maybe there is more to do..)

45.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \core..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~22 debug messages>

45.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \core.
Performed a total of 0 changes.

45.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\core'.
Removed a total of 0 cells.

45.13. Executing OPT_DFF pass (perform DFF optimizations).

45.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..

45.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module core.

45.16. Finished OPT passes. (There is nothing left to do.)

46. Executing MEMORY pass.

46.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

46.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

46.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

46.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

46.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

46.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..

46.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

46.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

46.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..

46.10. Executing MEMORY_COLLECT pass (generating $mem cells).

47. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..

48. Executing OPT pass (performing simple optimizations).

48.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module core.
<suppressed ~91 debug messages>

48.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\core'.
Removed a total of 0 cells.

48.3. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $auto$ff.cc:266:slice$539 ($adffe) from module core (D = \i_fetch_stage.i_prog_cntr.data_i [1:0], Q = \i_fetch_stage.i_prog_cntr.count_o [1:0]).

48.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..
Removed 5 unused cells and 9 unused wires.
<suppressed ~6 debug messages>

48.5. Rerunning OPT passes. (Removed registers in this run.)

48.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module core.
<suppressed ~1 debug messages>

48.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\core'.
Removed a total of 0 cells.

48.8. Executing OPT_DFF pass (perform DFF optimizations).

48.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

48.10. Finished fast OPT passes.

49. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

50. Executing OPT pass (performing simple optimizations).

50.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module core.

50.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\core'.
Removed a total of 0 cells.

50.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \core..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~19 debug messages>

50.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \core.
    Consolidated identical input bits for $mux cell $flatten\i_decode_stage.\i_decoder.$procmux$238:
      Old ports: A={ 1'0 \imem_rdata_i [14:12] }, B={ \imem_rdata_i [30] \imem_rdata_i [14:12] }, Y=$flatten\i_decode_stage.\i_decoder.$2\alu_op_o[3:0]
      New ports: A=1'0, B=\imem_rdata_i [30], Y=$flatten\i_decode_stage.\i_decoder.$2\alu_op_o[3:0] [3]
      New connections: $flatten\i_decode_stage.\i_decoder.$2\alu_op_o[3:0] [2:0] = \imem_rdata_i [14:12]
    Consolidated identical input bits for $pmux cell $flatten\i_exec_stage.\i_mem_prep.$procmux$205:
      Old ports: A=\i_exec_stage.i_branch_gen.rs2_data_i, B={ \i_exec_stage.i_branch_gen.rs2_data_i [7:0] \i_exec_stage.i_branch_gen.rs2_data_i [7:0] \i_exec_stage.i_branch_gen.rs2_data_i [7:0] \i_exec_stage.i_branch_gen.rs2_data_i [7:0] \i_exec_stage.i_branch_gen.rs2_data_i [15:0] \i_exec_stage.i_branch_gen.rs2_data_i [15:0] }, Y=\dmem_wdata_o
      New ports: A=\i_exec_stage.i_branch_gen.rs2_data_i [31:8], B={ \i_exec_stage.i_branch_gen.rs2_data_i [7:0] \i_exec_stage.i_branch_gen.rs2_data_i [7:0] \i_exec_stage.i_branch_gen.rs2_data_i [7:0] \i_exec_stage.i_branch_gen.rs2_data_i [15:0] \i_exec_stage.i_branch_gen.rs2_data_i [15:8] }, Y=\dmem_wdata_o [31:8]
      New connections: \dmem_wdata_o [7:0] = \i_exec_stage.i_branch_gen.rs2_data_i [7:0]
    Consolidated identical input bits for $mux cell $flatten\i_exec_stage.\i_mem_prep.$ternary$/openlane/designs/sv_core/src/mem_prep.sv:64$113:
      Old ports: A=4'1111, B=4'0000, Y=$flatten\i_exec_stage.\i_mem_prep.$ternary$/openlane/designs/sv_core/src/mem_prep.sv:64$113_Y
      New ports: A=1'1, B=1'0, Y=$flatten\i_exec_stage.\i_mem_prep.$ternary$/openlane/designs/sv_core/src/mem_prep.sv:64$113_Y [0]
      New connections: $flatten\i_exec_stage.\i_mem_prep.$ternary$/openlane/designs/sv_core/src/mem_prep.sv:64$113_Y [3:1] = { $flatten\i_exec_stage.\i_mem_prep.$ternary$/openlane/designs/sv_core/src/mem_prep.sv:64$113_Y [0] $flatten\i_exec_stage.\i_mem_prep.$ternary$/openlane/designs/sv_core/src/mem_prep.sv:64$113_Y [0] $flatten\i_exec_stage.\i_mem_prep.$ternary$/openlane/designs/sv_core/src/mem_prep.sv:64$113_Y [0] }
    Consolidated identical input bits for $mux cell $flatten\i_hazard_unit.$ternary$/openlane/designs/sv_core/src/hazard_unit.sv:61$144:
      Old ports: A=3'000, B={ \i_hazard_unit.PS [1:0] 1'0 }, Y=\i_hazard_unit.NS
      New ports: A=2'00, B=\i_hazard_unit.PS [1:0], Y=\i_hazard_unit.NS [2:1]
      New connections: \i_hazard_unit.NS [0] = 1'0
  Optimizing cells in module \core.
Performed a total of 4 changes.

50.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\core'.
Removed a total of 0 cells.

50.6. Executing OPT_SHARE pass.

50.7. Executing OPT_DFF pass (perform DFF optimizations).

50.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..

50.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module core.
<suppressed ~2 debug messages>

50.10. Rerunning OPT passes. (Maybe there is more to do..)

50.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \core..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~19 debug messages>

50.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \core.
Performed a total of 0 changes.

50.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\core'.
Removed a total of 0 cells.

50.14. Executing OPT_SHARE pass.

50.15. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $flatten\i_hazard_unit.$procdff$511 ($adff) from module core.

50.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..

50.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module core.
<suppressed ~1 debug messages>

50.18. Rerunning OPT passes. (Maybe there is more to do..)

50.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \core..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~19 debug messages>

50.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \core.
    Consolidated identical input bits for $mux cell $flatten\i_hazard_unit.$ternary$/openlane/designs/sv_core/src/hazard_unit.sv:61$144:
      Old ports: A=2'00, B={ \i_hazard_unit.PS [1] 1'0 }, Y=\i_hazard_unit.NS [2:1]
      New ports: A=1'0, B=\i_hazard_unit.PS [1], Y=\i_hazard_unit.NS [2]
      New connections: \i_hazard_unit.NS [1] = 1'0
  Optimizing cells in module \core.
Performed a total of 1 changes.

50.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\core'.
Removed a total of 0 cells.

50.22. Executing OPT_SHARE pass.

50.23. Executing OPT_DFF pass (perform DFF optimizations).

50.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..

50.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module core.
<suppressed ~1 debug messages>

50.26. Rerunning OPT passes. (Maybe there is more to do..)

50.27. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \core..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~18 debug messages>

50.28. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \core.
Performed a total of 0 changes.

50.29. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\core'.
Removed a total of 0 cells.

50.30. Executing OPT_SHARE pass.

50.31. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$594 ($adff) from module core.

50.32. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..

50.33. Executing OPT_EXPR pass (perform const folding).
Optimizing module core.
<suppressed ~2 debug messages>

50.34. Rerunning OPT passes. (Maybe there is more to do..)

50.35. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \core..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~18 debug messages>

50.36. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \core.
Performed a total of 0 changes.

50.37. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\core'.
Removed a total of 0 cells.

50.38. Executing OPT_SHARE pass.

50.39. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$595 ($adff) from module core.

50.40. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..

50.41. Executing OPT_EXPR pass (perform const folding).
Optimizing module core.
<suppressed ~2 debug messages>

50.42. Rerunning OPT passes. (Maybe there is more to do..)

50.43. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \core..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~18 debug messages>

50.44. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \core.
Performed a total of 0 changes.

50.45. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\core'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

50.46. Executing OPT_SHARE pass.

50.47. Executing OPT_DFF pass (perform DFF optimizations).

50.48. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

50.49. Executing OPT_EXPR pass (perform const folding).
Optimizing module core.

50.50. Rerunning OPT passes. (Maybe there is more to do..)

50.51. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \core..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~18 debug messages>

50.52. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \core.
Performed a total of 0 changes.

50.53. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\core'.
Removed a total of 0 cells.

50.54. Executing OPT_SHARE pass.

50.55. Executing OPT_DFF pass (perform DFF optimizations).

50.56. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..

50.57. Executing OPT_EXPR pass (perform const folding).
Optimizing module core.

50.58. Finished OPT passes. (There is nothing left to do.)

51. Executing TECHMAP pass (map to technology primitives).

51.1. Executing Verilog-2005 frontend: /build/bin/../share/yosys/techmap.v
Parsing Verilog input from `/build/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

51.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $logic_or.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $not.
Using template $paramod$fbc7873bff55778c0b3173955b7e4bce1d9d6834\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$97565c3687be688407d1272a293bd9d0ae6852dc\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $reduce_or.
Using template $paramod$c2e415ef15bc3ccd2723772353a6b450d3d76206\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $reduce_bool.
Using template $paramod$54d740639e1393b22262823179ff783ea9f17a35\_90_pmux for cells of type $pmux.
Using template $paramod$constmap:4621fcf06a436d1e2a4080e2ed9866a7d07a6e07$paramod$feecc7a0dbd012970970f2858f15e786e251f677\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$constmap:4621fcf06a436d1e2a4080e2ed9866a7d07a6e07$paramod$335cfd09f1afa8139c4aafcbbe5f361887b79c5e\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod$constmap:4621fcf06a436d1e2a4080e2ed9866a7d07a6e07$paramod$e765c459d3029c22a22a27989e94858fd9ebfa9c\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using template $paramod$a5f0941832cc861549e29ccafffe20bfdf2e5528\_90_pmux for cells of type $pmux.
Using template $paramod$constmap:66d421c313e4e958be776b99540ac2de3b59fdbc$paramod$77562a466236eb4a6d905351a0995599b75075cb\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod$constmap:7ad8fbc46f703f685a088264bc000efc3b6130e2$paramod$cbc044d1bfac1f26bafb5691fcbb649e98f6b6fc\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod$cc1e387d9d5ac1d3f6e6bed180038d9c0ac48d0c\_90_pmux for cells of type $pmux.
Using template $paramod$2653f68ddb8eab7b1907b4a20767b72a824a7a36\_90_alu for cells of type $alu.
Using template $paramod$eaeb96106163dbf82031649d189817109fe07c69\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $or.
Using template $paramod$44a13d10af618e7fbe7b9aad2f6151ffcee1e2fa\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $adff.
Using template $paramod$645fe0cc96ae5edb83bff90cc2c78f4a20ca3e3c\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100000 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011110 for cells of type $lcu.
No more expansions possible.
<suppressed ~3295 debug messages>

52. Executing OPT pass (performing simple optimizations).

52.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module core.
<suppressed ~784 debug messages>

52.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\core'.
<suppressed ~3690 debug messages>
Removed a total of 1230 cells.

52.3. Executing OPT_DFF pass (perform DFF optimizations).

52.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..
Removed 126 unused cells and 1624 unused wires.
<suppressed ~127 debug messages>

52.5. Finished fast OPT passes.

53. Executing ABC pass (technology mapping using ABC).

53.1. Extracting gate netlist of module `\core' to `<abc-temp-dir>/input.blif'..
Extracted 2969 gates and 3342 wires to a netlist network with 370 inputs and 224 outputs.

53.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

53.1.2. Re-integrating ABC results.
ABC RESULTS:              XNOR cells:       39
ABC RESULTS:               NOR cells:      161
ABC RESULTS:             ORNOT cells:      152
ABC RESULTS:               NOT cells:      241
ABC RESULTS:              NAND cells:       64
ABC RESULTS:                OR cells:      469
ABC RESULTS:               AND cells:       56
ABC RESULTS:               XOR cells:      139
ABC RESULTS:               MUX cells:      620
ABC RESULTS:            ANDNOT cells:     1087
ABC RESULTS:        internal signals:     2748
ABC RESULTS:           input signals:      370
ABC RESULTS:          output signals:      224
Removing temp directory.

54. Executing OPT pass (performing simple optimizations).

54.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module core.
<suppressed ~7 debug messages>

54.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\core'.
<suppressed ~24 debug messages>
Removed a total of 8 cells.

54.3. Executing OPT_DFF pass (perform DFF optimizations).

54.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..
Removed 1 unused cells and 1352 unused wires.
<suppressed ~35 debug messages>

54.5. Finished fast OPT passes.

55. Executing HIERARCHY pass (managing design hierarchy).

55.1. Analyzing design hierarchy..
Top module:  \core

55.2. Analyzing design hierarchy..
Top module:  \core
Removed 0 unused modules.

56. Printing statistics.

=== core ===

   Number of wires:               3028
   Number of wire bits:           7760
   Number of public wires:         228
   Number of public wire bits:    4960
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               3506
     $_ANDNOT_                    1083
     $_AND_                         56
     $_DFFE_PN0N_                  233
     $_DFFE_PN0P_                   32
     $_DFFE_PP_                     41
     $_DFF_PN0_                    181
     $_MUX_                        620
     $_NAND_                        63
     $_NOR_                        160
     $_NOT_                        240
     $_ORNOT_                      152
     $_OR_                         468
     $_XNOR_                        39
     $_XOR_                        138

57. Executing CHECK pass (checking for obvious problems).
Checking module core...
Found and reported 0 problems.

58. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/sv_core/runs/RUN_2023.05.11_22.16.27/tmp/synthesis/post_techmap.dot'.
Dumping module core to page 1.

59. Executing SHARE pass (SAT-based resource sharing).

60. Executing OPT pass (performing simple optimizations).

60.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module core.

60.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\core'.
Removed a total of 0 cells.

60.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \core..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

60.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \core.
Performed a total of 0 changes.

60.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\core'.
Removed a total of 0 cells.

60.6. Executing OPT_DFF pass (perform DFF optimizations).

60.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..

60.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module core.

60.9. Finished OPT passes. (There is nothing left to do.)

61. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..
Removed 0 unused cells and 168 unused wires.
<suppressed ~168 debug messages>

62. Printing statistics.

=== core ===

   Number of wires:               2860
   Number of wire bits:           4014
   Number of public wires:          60
   Number of public wire bits:    1214
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               3506
     $_ANDNOT_                    1083
     $_AND_                         56
     $_DFFE_PN0N_                  233
     $_DFFE_PN0P_                   32
     $_DFFE_PP_                     41
     $_DFF_PN0_                    181
     $_MUX_                        620
     $_NAND_                        63
     $_NOR_                        160
     $_NOT_                        240
     $_ORNOT_                      152
     $_OR_                         468
     $_XNOR_                        39
     $_XOR_                        138

mapping tbuf

63. Executing TECHMAP pass (map to technology primitives).

63.1. Executing Verilog-2005 frontend: /home/ubuntu/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/home/ubuntu/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

63.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

64. Executing SIMPLEMAP pass (map simple cells to gate primitives).

65. Executing TECHMAP pass (map to technology primitives).

65.1. Executing Verilog-2005 frontend: /home/ubuntu/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/home/ubuntu/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

65.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

66. Executing SIMPLEMAP pass (map simple cells to gate primitives).

67. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

67.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\core':
  mapped 446 $_DFF_PN0_ cells to \sky130_fd_sc_hd__dfrtp_2 cells.
  mapped 41 $_DFF_P_ cells to \sky130_fd_sc_hd__dfxtp_2 cells.

68. Printing statistics.

=== core ===

   Number of wires:               3166
   Number of wire bits:           4320
   Number of public wires:          60
   Number of public wire bits:    1214
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               3812
     $_ANDNOT_                    1083
     $_AND_                         56
     $_MUX_                        926
     $_NAND_                        63
     $_NOR_                        160
     $_NOT_                        240
     $_ORNOT_                      152
     $_OR_                         468
     $_XNOR_                        39
     $_XOR_                        138
     sky130_fd_sc_hd__dfrtp_2      446
     sky130_fd_sc_hd__dfxtp_2       41

[INFO]: USING STRATEGY AREA 0

69. Executing ABC pass (technology mapping using ABC).

69.1. Extracting gate netlist of module `\core' to `/tmp/yosys-abc-lLOn6c/input.blif'..
Extracted 3325 gates and 3872 wires to a netlist network with 547 inputs and 442 outputs.

69.1.1. Executing ABC.
Running ABC command: "/build/bin/yosys-abc" -s -f /tmp/yosys-abc-lLOn6c/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-lLOn6c/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-lLOn6c/input.blif 
ABC: + read_lib -w /openlane/designs/sv_core/runs/RUN_2023.05.11_22.16.27/tmp/synthesis/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.07 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130A_merged" from "/openlane/designs/sv_core/runs/RUN_2023.05.11_22.16.27/tmp/synthesis/trimmed.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.11 sec
ABC: Memory =    9.54 MB. Time =     0.11 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /openlane/designs/sv_core/runs/RUN_2023.05.11_22.16.27/tmp/synthesis/synthesis.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2".
ABC: Setting output load to be 33.442001.
ABC: + read_constr /openlane/designs/sv_core/runs/RUN_2023.05.11_22.16.27/tmp/synthesis/synthesis.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + retime -D -D 12000 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 12000 
ABC: + &get -n 
ABC: + &st 
ABC: + &dch 
ABC: + &nf 
ABC: + &put 
ABC: + buffer -N 30 -S 750.0 
ABC: + upsize -D 12000 
ABC: Current delay (6992.29 ps) does not exceed the target delay (12000.00 ps). Upsizing is not performed.
ABC: + dnsize -D 12000 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =   2478 ( 16.3 %)   Cap = 11.0 ff (  3.8 %)   Area =    21087.72 ( 83.4 %)   Delay =  7449.59 ps  (  2.1 %)               
ABC: Path  0 --     113 : 0    7 pi                       A =   0.00  Df =  68.4  -37.5 ps  S = 101.7 ps  Cin =  0.0 ff  Cout =  20.9 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --     995 : 2    2 sky130_fd_sc_hd__xor2_2  A =  16.27  Df = 252.8  -51.4 ps  S = 129.7 ps  Cin =  8.6 ff  Cout =   6.2 ff  Cmax = 130.0 ff  G =   68  
ABC: Path  2 --    1019 : 4    1 sky130_fd_sc_hd__or4b_2  A =  10.01  Df = 849.7 -443.0 ps  S =  94.8 ps  Cin =  1.5 ff  Cout =   2.2 ff  Cmax = 265.5 ff  G =  143  
ABC: Path  3 --    1020 : 1   15 sky130_fd_sc_hd__buf_1   A =   3.75  Df =1099.9 -319.6 ps  S = 477.3 ps  Cin =  2.1 ff  Cout =  40.6 ff  Cmax = 130.0 ff  G = 1813  
ABC: Path  4 --    1026 : 3    1 sky130_fd_sc_hd__or3_2   A =   7.51  Df =1605.9 -511.1 ps  S =  83.1 ps  Cin =  1.5 ff  Cout =   4.7 ff  Cmax = 310.4 ff  G =  290  
ABC: Path  5 --    1031 : 4    7 sky130_fd_sc_hd__a31oi_2 A =  12.51  Df =1933.3 -362.3 ps  S = 314.7 ps  Cin =  4.4 ff  Cout =  19.6 ff  Cmax = 118.1 ff  G =  426  
ABC: Path  6 --    1037 : 3    1 sky130_fd_sc_hd__a21bo_2 A =  10.01  Df =2113.9 -297.8 ps  S =  46.1 ps  Cin =  2.0 ff  Cout =   2.2 ff  Cmax = 288.4 ff  G =  103  
ABC: Path  7 --    1038 : 1   18 sky130_fd_sc_hd__buf_1   A =   3.75  Df =2667.4 -537.6 ps  S = 730.4 ps  Cin =  2.1 ff  Cout =  62.5 ff  Cmax = 130.0 ff  G = 2851  
ABC: Path  8 --    1126 : 2    4 sky130_fd_sc_hd__or2_2   A =   6.26  Df =2956.5 -376.4 ps  S = 115.0 ps  Cin =  1.5 ff  Cout =  18.8 ff  Cmax = 299.4 ff  G = 1251  
ABC: Path  9 --    1625 : 3    5 sky130_fd_sc_hd__a21oi_2 A =   8.76  Df =3045.3 -120.8 ps  S = 192.6 ps  Cin =  4.6 ff  Cout =  13.3 ff  Cmax = 128.2 ff  G =  275  
ABC: Path 10 --    1632 : 5    3 sky130_fd_sc_hd__o311a_2 A =  11.26  Df =3462.6 -304.3 ps  S =  81.3 ps  Cin =  2.4 ff  Cout =  11.2 ff  Cmax = 293.9 ff  G =  451  
ABC: Path 11 --    1633 : 4    3 sky130_fd_sc_hd__or4_2   A =   8.76  Df =4052.8 -752.3 ps  S = 131.9 ps  Cin =  1.5 ff  Cout =  10.7 ff  Cmax = 310.4 ff  G =  687  
ABC: Path 12 --    1674 : 3    2 sky130_fd_sc_hd__a21oi_2 A =   8.76  Df =4225.4 -758.3 ps  S = 121.9 ps  Cin =  4.6 ff  Cout =   6.7 ff  Cmax = 128.2 ff  G =  139  
ABC: Path 13 --    1694 : 3    5 sky130_fd_sc_hd__a21oi_2 A =   8.76  Df =4333.8 -614.4 ps  S = 257.0 ps  Cin =  4.6 ff  Cout =  19.2 ff  Cmax = 128.2 ff  G =  402  
ABC: Path 14 --    1739 : 3    4 sky130_fd_sc_hd__o21ai_2 A =   8.76  Df =4531.9 -689.5 ps  S = 173.0 ps  Cin =  4.5 ff  Cout =  11.4 ff  Cmax = 139.2 ff  G =  240  
ABC: Path 15 --    1740 : 4    3 sky130_fd_sc_hd__or4bb_2 A =  12.51  Df =5104.0-1037.1 ps  S = 117.1 ps  Cin =  1.5 ff  Cout =   8.6 ff  Cmax = 312.2 ff  G =  557  
ABC: Path 16 --    1753 : 4    3 sky130_fd_sc_hd__a211o_2 A =  10.01  Df =5442.9-1235.2 ps  S =  65.5 ps  Cin =  2.4 ff  Cout =   9.6 ff  Cmax = 325.0 ff  G =  390  
ABC: Path 17 --    1762 : 3    3 sky130_fd_sc_hd__a21o_2  A =   8.76  Df =5675.6-1326.1 ps  S =  61.1 ps  Cin =  2.4 ff  Cout =   9.5 ff  Cmax = 309.5 ff  G =  390  
ABC: Path 18 --    1772 : 3    2 sky130_fd_sc_hd__a21o_2  A =   8.76  Df =5865.5-1396.0 ps  S =  40.2 ps  Cin =  2.4 ff  Cout =   4.9 ff  Cmax = 309.5 ff  G =  199  
ABC: Path 19 --    1840 : 4    1 sky130_fd_sc_hd__a31o_2  A =   8.76  Df =6082.0-1397.6 ps  S =  35.3 ps  Cin =  2.4 ff  Cout =   2.2 ff  Cmax = 271.9 ff  G =   89  
ABC: Path 20 --    1841 : 1   10 sky130_fd_sc_hd__buf_1   A =   3.75  Df =6386.0-1196.3 ps  S = 665.7 ps  Cin =  2.1 ff  Cout =  57.0 ff  Cmax = 130.0 ff  G = 2662  
ABC: Path 21 --    1850 : 4    2 sky130_fd_sc_hd__or4_2   A =   8.76  Df =7051.0 -699.1 ps  S = 127.4 ps  Cin =  1.5 ff  Cout =   9.6 ff  Cmax = 310.4 ff  G =  618  
ABC: Path 22 --    1855 : 4    1 sky130_fd_sc_hd__a31oi_2 A =  12.51  Df =7449.6 -673.5 ps  S = 477.0 ps  Cin =  4.4 ff  Cout =  33.4 ff  Cmax = 118.1 ff  G =  760  
ABC: Start-point = pi112 (\i_decode_stage.decode_state_o [204]).  End-point = po7 (\dmem_be_o [3]).
ABC: + print_stats -m 
ABC: netlist                       : i/o =  547/  442  lat =    0  nd =  2478  edge =   6759  area =21088.68  delay =24.00  lev = 24
ABC: + write_blif /tmp/yosys-abc-lLOn6c/output.blif 

69.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__nor4b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o2111ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nor4_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__mux4_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a32oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__buf_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nand4b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a221oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nand2b_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__nand4_2 cells:        8
ABC RESULTS:   sky130_fd_sc_hd__and4b_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a32o_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__a311o_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__o311a_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__o2111a_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__o211a_2 cells:       18
ABC RESULTS:   sky130_fd_sc_hd__a31oi_2 cells:        9
ABC RESULTS:   sky130_fd_sc_hd__nor2b_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a22oi_2 cells:        9
ABC RESULTS:   sky130_fd_sc_hd__o31a_2 cells:       38
ABC RESULTS:   sky130_fd_sc_hd__o31ai_2 cells:       10
ABC RESULTS:   sky130_fd_sc_hd__o32a_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__o221ai_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__o21ai_2 cells:       85
ABC RESULTS:   sky130_fd_sc_hd__o22ai_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__or2b_2 cells:       35
ABC RESULTS:   sky130_fd_sc_hd__o21ba_2 cells:       11
ABC RESULTS:   sky130_fd_sc_hd__o21bai_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__or4b_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__or3_2 cells:       35
ABC RESULTS:   sky130_fd_sc_hd__a21boi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a41o_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__nand3_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__and4bb_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__or3b_2 cells:       15
ABC RESULTS:   sky130_fd_sc_hd__nor3_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__or4bb_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__o211ai_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__a211o_2 cells:       55
ABC RESULTS:   sky130_fd_sc_hd__o2bb2a_2 cells:        9
ABC RESULTS:   sky130_fd_sc_hd__and4_2 cells:       27
ABC RESULTS:   sky130_fd_sc_hd__o221a_2 cells:       35
ABC RESULTS:   sky130_fd_sc_hd__xor2_2 cells:       17
ABC RESULTS:   sky130_fd_sc_hd__a221o_2 cells:       55
ABC RESULTS:   sky130_fd_sc_hd__a211oi_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__o22a_2 cells:       20
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:       75
ABC RESULTS:   sky130_fd_sc_hd__or4_2 cells:       33
ABC RESULTS:   sky130_fd_sc_hd__and3b_2 cells:        9
ABC RESULTS:   sky130_fd_sc_hd__and2_2 cells:       68
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:       84
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:      119
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:       54
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:      157
ABC RESULTS:   sky130_fd_sc_hd__a2bb2o_2 cells:       30
ABC RESULTS:   sky130_fd_sc_hd__xnor2_2 cells:       25
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:      106
ABC RESULTS:   sky130_fd_sc_hd__a22o_2 cells:       83
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:      134
ABC RESULTS:   sky130_fd_sc_hd__a21bo_2 cells:       11
ABC RESULTS:   sky130_fd_sc_hd__and2b_2 cells:       33
ABC RESULTS:   sky130_fd_sc_hd__a31o_2 cells:       43
ABC RESULTS:   sky130_fd_sc_hd__mux2_2 cells:      444
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:      328
ABC RESULTS:   sky130_fd_sc_hd__o21a_2 cells:       58
ABC RESULTS:        internal signals:     2883
ABC RESULTS:           input signals:      547
ABC RESULTS:          output signals:      442
Removing temp directory.

70. Executing SETUNDEF pass (replace undef values with defined constants).

71. Executing HILOMAP pass (mapping to constant drivers).

72. Executing SPLITNETS pass (splitting up multi-bit signals).

73. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..
Removed 91 unused cells and 4327 unused wires.
<suppressed ~499 debug messages>

74. Executing INSBUF pass (insert buffer cells for connected wires).
Add core/$auto$insbuf.cc:97:execute$15104: \imem_rdata_i [15] -> \rf_port1_reg_o [0]
Add core/$auto$insbuf.cc:97:execute$15105: \imem_rdata_i [16] -> \rf_port1_reg_o [1]
Add core/$auto$insbuf.cc:97:execute$15106: \imem_rdata_i [17] -> \rf_port1_reg_o [2]
Add core/$auto$insbuf.cc:97:execute$15107: \imem_rdata_i [18] -> \rf_port1_reg_o [3]
Add core/$auto$insbuf.cc:97:execute$15108: \imem_rdata_i [19] -> \rf_port1_reg_o [4]
Add core/$auto$insbuf.cc:97:execute$15109: \imem_rdata_i [20] -> \rf_port2_reg_o [0]
Add core/$auto$insbuf.cc:97:execute$15110: \imem_rdata_i [21] -> \rf_port2_reg_o [1]
Add core/$auto$insbuf.cc:97:execute$15111: \imem_rdata_i [22] -> \rf_port2_reg_o [2]
Add core/$auto$insbuf.cc:97:execute$15112: \imem_rdata_i [23] -> \rf_port2_reg_o [3]
Add core/$auto$insbuf.cc:97:execute$15113: \imem_rdata_i [24] -> \rf_port2_reg_o [4]

75. Executing CHECK pass (checking for obvious problems).
Checking module core...
Warning: Wire core.\rf_wr_reg_o [4] is used but has no driver.
Warning: Wire core.\rf_wr_reg_o [3] is used but has no driver.
Warning: Wire core.\rf_wr_reg_o [2] is used but has no driver.
Warning: Wire core.\rf_wr_reg_o [1] is used but has no driver.
Warning: Wire core.\rf_wr_reg_o [0] is used but has no driver.
Warning: Wire core.\rf_wr_en_o is used but has no driver.
Warning: Wire core.\rf_wr_data_o [31] is used but has no driver.
Warning: Wire core.\rf_wr_data_o [30] is used but has no driver.
Warning: Wire core.\rf_wr_data_o [29] is used but has no driver.
Warning: Wire core.\rf_wr_data_o [28] is used but has no driver.
Warning: Wire core.\rf_wr_data_o [27] is used but has no driver.
Warning: Wire core.\rf_wr_data_o [26] is used but has no driver.
Warning: Wire core.\rf_wr_data_o [25] is used but has no driver.
Warning: Wire core.\rf_wr_data_o [24] is used but has no driver.
Warning: Wire core.\rf_wr_data_o [23] is used but has no driver.
Warning: Wire core.\rf_wr_data_o [22] is used but has no driver.
Warning: Wire core.\rf_wr_data_o [21] is used but has no driver.
Warning: Wire core.\rf_wr_data_o [20] is used but has no driver.
Warning: Wire core.\rf_wr_data_o [19] is used but has no driver.
Warning: Wire core.\rf_wr_data_o [18] is used but has no driver.
Warning: Wire core.\rf_wr_data_o [17] is used but has no driver.
Warning: Wire core.\rf_wr_data_o [16] is used but has no driver.
Warning: Wire core.\rf_wr_data_o [15] is used but has no driver.
Warning: Wire core.\rf_wr_data_o [14] is used but has no driver.
Warning: Wire core.\rf_wr_data_o [13] is used but has no driver.
Warning: Wire core.\rf_wr_data_o [12] is used but has no driver.
Warning: Wire core.\rf_wr_data_o [11] is used but has no driver.
Warning: Wire core.\rf_wr_data_o [10] is used but has no driver.
Warning: Wire core.\rf_wr_data_o [9] is used but has no driver.
Warning: Wire core.\rf_wr_data_o [8] is used but has no driver.
Warning: Wire core.\rf_wr_data_o [7] is used but has no driver.
Warning: Wire core.\rf_wr_data_o [6] is used but has no driver.
Warning: Wire core.\rf_wr_data_o [5] is used but has no driver.
Warning: Wire core.\rf_wr_data_o [4] is used but has no driver.
Warning: Wire core.\rf_wr_data_o [3] is used but has no driver.
Warning: Wire core.\rf_wr_data_o [2] is used but has no driver.
Warning: Wire core.\rf_wr_data_o [1] is used but has no driver.
Warning: Wire core.\rf_wr_data_o [0] is used but has no driver.
Warning: Wire core.\rf_port2_reg_o [4] is used but has no driver.
Warning: Wire core.\rf_port2_reg_o [3] is used but has no driver.
Warning: Wire core.\rf_port2_reg_o [2] is used but has no driver.
Warning: Wire core.\rf_port2_reg_o [1] is used but has no driver.
Warning: Wire core.\rf_port2_reg_o [0] is used but has no driver.
Warning: Wire core.\rf_port1_reg_o [4] is used but has no driver.
Warning: Wire core.\rf_port1_reg_o [3] is used but has no driver.
Warning: Wire core.\rf_port1_reg_o [2] is used but has no driver.
Warning: Wire core.\rf_port1_reg_o [1] is used but has no driver.
Warning: Wire core.\rf_port1_reg_o [0] is used but has no driver.
Warning: Wire core.\imem_we_o is used but has no driver.
Warning: Wire core.\imem_wdata_o [31] is used but has no driver.
Warning: Wire core.\imem_wdata_o [30] is used but has no driver.
Warning: Wire core.\imem_wdata_o [29] is used but has no driver.
Warning: Wire core.\imem_wdata_o [28] is used but has no driver.
Warning: Wire core.\imem_wdata_o [27] is used but has no driver.
Warning: Wire core.\imem_wdata_o [26] is used but has no driver.
Warning: Wire core.\imem_wdata_o [25] is used but has no driver.
Warning: Wire core.\imem_wdata_o [24] is used but has no driver.
Warning: Wire core.\imem_wdata_o [23] is used but has no driver.
Warning: Wire core.\imem_wdata_o [22] is used but has no driver.
Warning: Wire core.\imem_wdata_o [21] is used but has no driver.
Warning: Wire core.\imem_wdata_o [20] is used but has no driver.
Warning: Wire core.\imem_wdata_o [19] is used but has no driver.
Warning: Wire core.\imem_wdata_o [18] is used but has no driver.
Warning: Wire core.\imem_wdata_o [17] is used but has no driver.
Warning: Wire core.\imem_wdata_o [16] is used but has no driver.
Warning: Wire core.\imem_wdata_o [15] is used but has no driver.
Warning: Wire core.\imem_wdata_o [14] is used but has no driver.
Warning: Wire core.\imem_wdata_o [13] is used but has no driver.
Warning: Wire core.\imem_wdata_o [12] is used but has no driver.
Warning: Wire core.\imem_wdata_o [11] is used but has no driver.
Warning: Wire core.\imem_wdata_o [10] is used but has no driver.
Warning: Wire core.\imem_wdata_o [9] is used but has no driver.
Warning: Wire core.\imem_wdata_o [8] is used but has no driver.
Warning: Wire core.\imem_wdata_o [7] is used but has no driver.
Warning: Wire core.\imem_wdata_o [6] is used but has no driver.
Warning: Wire core.\imem_wdata_o [5] is used but has no driver.
Warning: Wire core.\imem_wdata_o [4] is used but has no driver.
Warning: Wire core.\imem_wdata_o [3] is used but has no driver.
Warning: Wire core.\imem_wdata_o [2] is used but has no driver.
Warning: Wire core.\imem_wdata_o [1] is used but has no driver.
Warning: Wire core.\imem_wdata_o [0] is used but has no driver.
Warning: Wire core.\imem_req_o is used but has no driver.
Warning: Wire core.\imem_be_o [3] is used but has no driver.
Warning: Wire core.\imem_be_o [2] is used but has no driver.
Warning: Wire core.\imem_be_o [1] is used but has no driver.
Warning: Wire core.\imem_be_o [0] is used but has no driver.
Warning: Wire core.\imem_addr_o [31] is used but has no driver.
Warning: Wire core.\imem_addr_o [30] is used but has no driver.
Warning: Wire core.\imem_addr_o [29] is used but has no driver.
Warning: Wire core.\imem_addr_o [28] is used but has no driver.
Warning: Wire core.\imem_addr_o [27] is used but has no driver.
Warning: Wire core.\imem_addr_o [26] is used but has no driver.
Warning: Wire core.\imem_addr_o [25] is used but has no driver.
Warning: Wire core.\imem_addr_o [24] is used but has no driver.
Warning: Wire core.\imem_addr_o [23] is used but has no driver.
Warning: Wire core.\imem_addr_o [22] is used but has no driver.
Warning: Wire core.\imem_addr_o [21] is used but has no driver.
Warning: Wire core.\imem_addr_o [20] is used but has no driver.
Warning: Wire core.\imem_addr_o [19] is used but has no driver.
Warning: Wire core.\imem_addr_o [18] is used but has no driver.
Warning: Wire core.\imem_addr_o [17] is used but has no driver.
Warning: Wire core.\imem_addr_o [16] is used but has no driver.
Warning: Wire core.\imem_addr_o [15] is used but has no driver.
Warning: Wire core.\imem_addr_o [14] is used but has no driver.
Warning: Wire core.\imem_addr_o [13] is used but has no driver.
Warning: Wire core.\imem_addr_o [12] is used but has no driver.
Warning: Wire core.\imem_addr_o [11] is used but has no driver.
Warning: Wire core.\imem_addr_o [10] is used but has no driver.
Warning: Wire core.\imem_addr_o [9] is used but has no driver.
Warning: Wire core.\imem_addr_o [8] is used but has no driver.
Warning: Wire core.\imem_addr_o [7] is used but has no driver.
Warning: Wire core.\imem_addr_o [6] is used but has no driver.
Warning: Wire core.\imem_addr_o [5] is used but has no driver.
Warning: Wire core.\imem_addr_o [4] is used but has no driver.
Warning: Wire core.\imem_addr_o [3] is used but has no driver.
Warning: Wire core.\imem_addr_o [2] is used but has no driver.
Warning: Wire core.\imem_addr_o [1] is used but has no driver.
Warning: Wire core.\imem_addr_o [0] is used but has no driver.
Warning: Wire core.\dmem_we_o is used but has no driver.
Warning: Wire core.\dmem_wdata_o [31] is used but has no driver.
Warning: Wire core.\dmem_wdata_o [30] is used but has no driver.
Warning: Wire core.\dmem_wdata_o [29] is used but has no driver.
Warning: Wire core.\dmem_wdata_o [28] is used but has no driver.
Warning: Wire core.\dmem_wdata_o [27] is used but has no driver.
Warning: Wire core.\dmem_wdata_o [26] is used but has no driver.
Warning: Wire core.\dmem_wdata_o [25] is used but has no driver.
Warning: Wire core.\dmem_wdata_o [24] is used but has no driver.
Warning: Wire core.\dmem_wdata_o [23] is used but has no driver.
Warning: Wire core.\dmem_wdata_o [22] is used but has no driver.
Warning: Wire core.\dmem_wdata_o [21] is used but has no driver.
Warning: Wire core.\dmem_wdata_o [20] is used but has no driver.
Warning: Wire core.\dmem_wdata_o [19] is used but has no driver.
Warning: Wire core.\dmem_wdata_o [18] is used but has no driver.
Warning: Wire core.\dmem_wdata_o [17] is used but has no driver.
Warning: Wire core.\dmem_wdata_o [16] is used but has no driver.
Warning: Wire core.\dmem_wdata_o [15] is used but has no driver.
Warning: Wire core.\dmem_wdata_o [14] is used but has no driver.
Warning: Wire core.\dmem_wdata_o [13] is used but has no driver.
Warning: Wire core.\dmem_wdata_o [12] is used but has no driver.
Warning: Wire core.\dmem_wdata_o [11] is used but has no driver.
Warning: Wire core.\dmem_wdata_o [10] is used but has no driver.
Warning: Wire core.\dmem_wdata_o [9] is used but has no driver.
Warning: Wire core.\dmem_wdata_o [8] is used but has no driver.
Warning: Wire core.\dmem_wdata_o [7] is used but has no driver.
Warning: Wire core.\dmem_wdata_o [6] is used but has no driver.
Warning: Wire core.\dmem_wdata_o [5] is used but has no driver.
Warning: Wire core.\dmem_wdata_o [4] is used but has no driver.
Warning: Wire core.\dmem_wdata_o [3] is used but has no driver.
Warning: Wire core.\dmem_wdata_o [2] is used but has no driver.
Warning: Wire core.\dmem_wdata_o [1] is used but has no driver.
Warning: Wire core.\dmem_wdata_o [0] is used but has no driver.
Warning: Wire core.\dmem_req_o is used but has no driver.
Warning: Wire core.\dmem_be_o [3] is used but has no driver.
Warning: Wire core.\dmem_be_o [2] is used but has no driver.
Warning: Wire core.\dmem_be_o [1] is used but has no driver.
Warning: Wire core.\dmem_be_o [0] is used but has no driver.
Warning: Wire core.\dmem_addr_o [31] is used but has no driver.
Warning: Wire core.\dmem_addr_o [30] is used but has no driver.
Warning: Wire core.\dmem_addr_o [29] is used but has no driver.
Warning: Wire core.\dmem_addr_o [28] is used but has no driver.
Warning: Wire core.\dmem_addr_o [27] is used but has no driver.
Warning: Wire core.\dmem_addr_o [26] is used but has no driver.
Warning: Wire core.\dmem_addr_o [25] is used but has no driver.
Warning: Wire core.\dmem_addr_o [24] is used but has no driver.
Warning: Wire core.\dmem_addr_o [23] is used but has no driver.
Warning: Wire core.\dmem_addr_o [22] is used but has no driver.
Warning: Wire core.\dmem_addr_o [21] is used but has no driver.
Warning: Wire core.\dmem_addr_o [20] is used but has no driver.
Warning: Wire core.\dmem_addr_o [19] is used but has no driver.
Warning: Wire core.\dmem_addr_o [18] is used but has no driver.
Warning: Wire core.\dmem_addr_o [17] is used but has no driver.
Warning: Wire core.\dmem_addr_o [16] is used but has no driver.
Warning: Wire core.\dmem_addr_o [15] is used but has no driver.
Warning: Wire core.\dmem_addr_o [14] is used but has no driver.
Warning: Wire core.\dmem_addr_o [13] is used but has no driver.
Warning: Wire core.\dmem_addr_o [12] is used but has no driver.
Warning: Wire core.\dmem_addr_o [11] is used but has no driver.
Warning: Wire core.\dmem_addr_o [10] is used but has no driver.
Warning: Wire core.\dmem_addr_o [9] is used but has no driver.
Warning: Wire core.\dmem_addr_o [8] is used but has no driver.
Warning: Wire core.\dmem_addr_o [7] is used but has no driver.
Warning: Wire core.\dmem_addr_o [6] is used but has no driver.
Warning: Wire core.\dmem_addr_o [5] is used but has no driver.
Warning: Wire core.\dmem_addr_o [4] is used but has no driver.
Warning: Wire core.\dmem_addr_o [3] is used but has no driver.
Warning: Wire core.\dmem_addr_o [2] is used but has no driver.
Warning: Wire core.\dmem_addr_o [1] is used but has no driver.
Warning: Wire core.\dmem_addr_o [0] is used but has no driver.
Found and reported 188 problems.

76. Printing statistics.

=== core ===

   Number of wires:               2852
   Number of wire bits:           3149
   Number of public wires:         510
   Number of public wire bits:     807
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               3015
     sky130_fd_sc_hd__a211o_2       55
     sky130_fd_sc_hd__a211oi_2       4
     sky130_fd_sc_hd__a21bo_2       11
     sky130_fd_sc_hd__a21boi_2       1
     sky130_fd_sc_hd__a21o_2       134
     sky130_fd_sc_hd__a21oi_2      106
     sky130_fd_sc_hd__a221o_2       55
     sky130_fd_sc_hd__a221oi_2       1
     sky130_fd_sc_hd__a22o_2        83
     sky130_fd_sc_hd__a22oi_2        9
     sky130_fd_sc_hd__a2bb2o_2      30
     sky130_fd_sc_hd__a311o_2        5
     sky130_fd_sc_hd__a31o_2        43
     sky130_fd_sc_hd__a31oi_2        9
     sky130_fd_sc_hd__a32o_2         6
     sky130_fd_sc_hd__a32oi_2        1
     sky130_fd_sc_hd__a41o_2         3
     sky130_fd_sc_hd__and2_2        68
     sky130_fd_sc_hd__and2b_2       33
     sky130_fd_sc_hd__and3_2        54
     sky130_fd_sc_hd__and3b_2        9
     sky130_fd_sc_hd__and4_2        27
     sky130_fd_sc_hd__and4b_2        2
     sky130_fd_sc_hd__and4bb_2       2
     sky130_fd_sc_hd__buf_1        328
     sky130_fd_sc_hd__buf_2         11
     sky130_fd_sc_hd__conb_1        40
     sky130_fd_sc_hd__dfrtp_2      446
     sky130_fd_sc_hd__dfxtp_2       41
     sky130_fd_sc_hd__inv_2         75
     sky130_fd_sc_hd__mux2_2       444
     sky130_fd_sc_hd__mux4_2         1
     sky130_fd_sc_hd__nand2_2      119
     sky130_fd_sc_hd__nand2b_2       4
     sky130_fd_sc_hd__nand3_2        7
     sky130_fd_sc_hd__nand4_2        8
     sky130_fd_sc_hd__nand4b_2       1
     sky130_fd_sc_hd__nor2_2       157
     sky130_fd_sc_hd__nor2b_2        3
     sky130_fd_sc_hd__nor3_2         4
     sky130_fd_sc_hd__nor4_2         1
     sky130_fd_sc_hd__nor4b_2        1
     sky130_fd_sc_hd__o2111a_2       3
     sky130_fd_sc_hd__o2111ai_2      1
     sky130_fd_sc_hd__o211a_2       18
     sky130_fd_sc_hd__o211ai_2       5
     sky130_fd_sc_hd__o21a_2        58
     sky130_fd_sc_hd__o21ai_2       85
     sky130_fd_sc_hd__o21ba_2       11
     sky130_fd_sc_hd__o21bai_2       6
     sky130_fd_sc_hd__o221a_2       35
     sky130_fd_sc_hd__o221ai_2       6
     sky130_fd_sc_hd__o22a_2        20
     sky130_fd_sc_hd__o22ai_2        5
     sky130_fd_sc_hd__o2bb2a_2       9
     sky130_fd_sc_hd__o311a_2        5
     sky130_fd_sc_hd__o31a_2        38
     sky130_fd_sc_hd__o31ai_2       10
     sky130_fd_sc_hd__o32a_2         6
     sky130_fd_sc_hd__or2_2         84
     sky130_fd_sc_hd__or2b_2        35
     sky130_fd_sc_hd__or3_2         35
     sky130_fd_sc_hd__or3b_2        15
     sky130_fd_sc_hd__or4_2         33
     sky130_fd_sc_hd__or4b_2         4
     sky130_fd_sc_hd__or4bb_2        4
     sky130_fd_sc_hd__xnor2_2       25
     sky130_fd_sc_hd__xor2_2        17

   Chip area for module '\core': 33878.742400

77. Executing Verilog backend.
Dumping module `\core'.

Warnings: 190 unique messages, 190 total
End of script. Logfile hash: 61db330356, CPU: user 4.83s system 0.09s, MEM: 47.29 MB peak
Yosys 0.27+30 (git sha1 101075611fc, gcc 8.3.1 -fPIC -Os)
Time spent: 61% 2x abc (7 sec), 8% 40x opt_expr (1 sec), ...
